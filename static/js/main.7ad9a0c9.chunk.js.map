{"version":3,"sources":["common/actions/spotifyClient.ts","authorization/auth.ts","components/SignIn/SignIn.tsx","common/actions/user.ts","common/actions/tracksAttributes.ts","common/actions/topArtists.ts","common/actions/snackbar.ts","components/SignIn/index.ts","components/HomePage/HomePage.tsx","components/HomePage/index.ts","components/Playlist/actions.ts","components/NotFound/NotFound.tsx","components/NotFound/index.ts","common/helpers/stringHelpers.ts","common/themes/button.ts","common/themes/slider.ts","common/themes/input.ts","common/themes/chip.ts","common/themes/table.ts","common/themes/linearProgressTheme.ts","components/Playlist/Playlist.tsx","components/Playlist/helpers/formatHelpers.ts","common/helpers/dateTimeHelpers.ts","components/Playlists/actions.ts","components/Playlist/index.ts","components/Playlists/subcomponents/PlaylistCard.tsx","components/Playlists/Playlists.tsx","common/constants/pagination.ts","components/Playlists/index.ts","components/CreatePlaylist/CreatePlaylist.tsx","components/CreatePlaylist/index.ts","components/ResponsiveDrawer/subcomponents/Profile.tsx","components/ResponsiveDrawer/subcomponents/SignOut.tsx","components/ResponsiveDrawer/ResponsiveDrawer.tsx","core/app/App.tsx","core/app/index.ts","components/Snackbar/reducer.ts","redux/rootReducer.ts","common/reducers/spotifyClient.ts","common/reducers/user.ts","components/Playlists/reducer.ts","components/Playlist/reducer.ts","common/reducers/tracksAttributes.ts","components/TopArtists/reducer.ts","redux/store.ts","index.tsx"],"names":["SPOTIFT_API","scopes","clientId","process","redirectUri","SignIn","history","this","props","location","pathname","console","log","indexOf","token","substring","setGlobalSpotifyClient","fetchUser","Cookies","set","path","sameSite","secure","spotifyWebApi","then","_","push","uri","params","URLSearchParams","client_id","redirect_uri","scope","join","response_type","className","href","toString","React","USER","type","SET_GLOBAL_SPOTIFY_CLIENT_TOKEN","data","TRACKS_ATTRIBUTES","api","dispatch","getMe","response","body","RECEIVE_USER","TOP_ARTISTS","fetchTracksAttributes","trackIds","getAudioFeaturesForTracks","RECEIVE_TRACKS_ATTRIBUTES","SNACKBAR","fetchTopArtists","timeRange","getMyTopArtists","time_range","RECEIVE_TOP_ARTISTS_LONG_TERM","RECEIVE_TOP_ARTISTS_MEDIUM_TERM","receiveTopArtistsMediumTerm","RECEIVE_TOP_ARTISTS_SHORT_TERM","receiveTopArtistsShortTerm","openSnackbar","OPEN","withRouter","connect","state","useStyles","makeStyles","theme","root","height","backgroundColor","image","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","avatar","form","width","marginTop","submit","PLAYLIST","classes","Grid","container","component","CssBaseline","item","xs","sm","md","Paper","elevation","square","Typography","variant","style","color","NotFound","capitalizeFirstLetter","str","charAt","toUpperCase","slice","buttonTheme","createMuiTheme","overrides","MuiButton","containedPrimary","sliderTheme","MuiSlider","thumbColorPrimary","track","rail","valueLabel","inputTheme","palette","primary","main","dark","MuiInput","MuiFormControl","chipTheme","MuiChip","tableTheme","MuiTableCell","paddingLeft","paddingRight","paddingTop","paddingBottom","linearProgresTheme","MuiLinearProgress","borderRadius","colorPrimary","barColorPrimary","bar","Playlist","loading","window","scrollTo","top","behavior","fetchPlaylist","playlistId","lastIndexOf","playlist","id","tracks","items","map","playlistToTrackIds","setState","images","length","src","url","maxWidth","maxHeight","alt","name","owner","display_name","normalizedData","attribute","ThemeProvider","LinearProgress","value","tracksAttributes","normalized","acousticness","danceability","energy","instrumentalness","valence","count","audio_features","forEach","feature","normalizeTrackAudioFeature","direction","renderAttributeBar","TableContainer","Table","TableBody","TableRow","hover","key","TableCell","album","artists","input","totalHours","totalMinutes","totalSeconds","hours","minutes","seconds","result","Math","floor","millisecondsToViewableFormat","duration_ms","renderPlaylistArtwork","renderPlaylistName","renderPlaylistOwner","renderPlaylistAnalysis","renderTracks","PLAYLISTS","getPlaylist","RECEIVE_PLAYLIST","tracksId","cardTheme","MuiCard","boxShadow","PlaylistCard","to","textDecoration","Card","CardActionArea","CardMedia","padding","title","CardContent","Playlists","handlePaginationChange","page","fetchPlaylists","user","undefined","playlists","limit","offset","search","lg","xl","Pagination","total","onChange","userId","options","getUserPlaylists","RECEIVE_PLAYLISTS","receivePlaylist","CreatePlaylist","componentDidMount","valueLabelFormat","round","handleSliderChange","attr","newValue","query","min","max","handlePlaylistNameChange","event","playlistName","target","handleArtistSelect","selectedArtistsIds","handleCreatePlaylistClick","getRecommendations","min_acousticness","max_acousticness","min_danceability","max_danceability","min_energy","max_energy","min_instrumentalness","max_instrumentalness","min_valence","max_valence","seed_artists","createPlaylist","addTracksToPlaylist","clearPlaylist","openSnackBar","open","message","renderPlaylistNameInput","TextField","renderAttributeSlider","Slider","valueLabelDisplay","step","renderArtistSelect","FormControl","error","Select","multiple","Input","multiline","renderValue","selected","flexWrap","Chip","label","find","a","Avatar","sort","b","artist","MenuItem","FormHelperText","render","topArtists","longTerm","mediumTerm","shortTerm","concat","filter","e","i","findIndex","justify","Button","size","onClick","disabled","CLEAR","Profile","Divider","wordWrap","SignOut","onClickHandler","remove","createStyles","drawer","breakpoints","up","flexShrink","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","content","flexGrow","ResponsiveDrawer","useTheme","useState","mobileOpen","setMobileOpen","handleDrawerToggle","justifyContent","List","ListItem","button","ListItemText","document","AppBar","position","Toolbar","IconButton","aria-label","edge","noWrap","Hidden","smUp","implementation","Drawer","anchor","onClose","ModalProps","keepMounted","Fragment","xsDown","children","App","get","getAccessToken","closeSnackbar","snackbar","Snackbar","exact","HomePage","CLOSE","initialSnackbarState","autoHideDuration","anchorOrigin","vertical","horizontal","combineReducers","SpotifyWebApi","action","setAccessToken","merge","defaultState","configureStore","preloadedState","createStore","rootReducer","applyMiddleware","thunk","addEventListener","getElementById","store","ReactDOM"],"mappings":"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","file":"static/js/main.7ad9a0c9.chunk.js","sourcesContent":["import { IAction } from 'common/interfaces';\n\nexport enum SPOTIFT_API {\n  SET_GLOBAL_SPOTIFY_CLIENT_TOKEN = 'spotifyApi/SET_GLOBAL_SPOTIFY_CLIENT_TOKEN',\n}\n\nexport const setGlobalSpotifyClient = (token: string): IAction<string> => {\n  return {\n    type: SPOTIFT_API.SET_GLOBAL_SPOTIFY_CLIENT_TOKEN,\n    data: token,\n  };\n};\n","export const authEndpoint: string = 'https://accounts.spotify.com/authorize?';\n\nexport const scopes: string[] = [\n  'playlist-read-collaborative',\n  'playlist-modify-public',\n  'user-top-read',\n  'playlist-read-private',\n  'playlist-modify-private',\n  'user-follow-read',\n  'user-read-recently-played',\n  'user-library-read',\n];\n\nexport const responseType: string = 'token';\n\nexport const clientId: string = process.env.REACT_APP_SPOTIFY_CLIENT_ID!;\n\nexport const redirectUri: string =\n  process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : 'https://gaganza.github.io/apollos-playlist/';\n","import * as React from 'react';\nimport Cookies from 'js-cookie';\n\nimport { redirectUri, clientId, scopes, authEndpoint, responseType } from 'authorization';\nimport { TSignInProps } from './interfaces';\n\nimport './style.scss';\n\nclass SignIn extends React.PureComponent<TSignInProps> {\n  public async componentDidMount(): Promise<void> {\n    let { history } = this.props;\n    let { location } = history;\n    let { pathname } = location;\n\n    console.log(process.env.PUBLIC_URL);\n\n    if (pathname.indexOf('access_token') !== -1) {\n      let token: string = pathname.substring(pathname.indexOf('=') + 1, pathname.indexOf('&'));\n\n      let { setGlobalSpotifyClient, history, fetchUser } = this.props;\n\n      Cookies.set('spotify-bearer', token, {\n        path: '/auth',\n        sameSite: 'none',\n        secure: true,\n      });\n\n      setGlobalSpotifyClient(token);\n      await fetchUser(this.props.spotifyWebApi).then((_: void) => {\n        history.push('/playlists');\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    let uri: string = `${authEndpoint}`;\n\n    let params: URLSearchParams = new URLSearchParams({\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      scope: scopes.join('%20'),\n      response_type: responseType,\n    });\n\n    return (\n      <a className=\"sign-in-button\" href={uri + params.toString()}>\n        Login to Spotify\n      </a>\n    );\n  }\n}\n\nexport default SignIn;\n","import { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport { IRootState, IAction, Response } from 'common/interfaces';\n\nexport enum USER {\n  RECEIVE_USER = 'user/RECEIVE_USER',\n}\n\nexport const receiveUser = (\n  data: SpotifyApi.CurrentUsersProfileResponse\n): IAction<SpotifyApi.CurrentUsersProfileResponse> => {\n  return { type: USER.RECEIVE_USER, data };\n};\n\nexport const fetchUser = (\n  api: SpotifyWebApi\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<SpotifyApi.CurrentUsersProfileResponse>> => {\n  return (dispatch: Dispatch<IAction<SpotifyApi.CurrentUsersProfileResponse>>): Promise<void> => {\n    return api.getMe().then((response: Response<SpotifyApi.CurrentUsersProfileResponse>) => {\n      dispatch(receiveUser(response.body));\n    });\n  };\n};\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { IAction, Response, IRootState } from 'common/interfaces';\n\nexport enum TRACKS_ATTRIBUTES {\n  RECEIVE_TRACKS_ATTRIBUTES = 'trackAttributes/RECEIVE_TRACKS_ATTRIBUTES',\n}\n\nexport const receiveTrackAttributes = (\n  data: SpotifyApi.MultipleAudioFeaturesResponse\n): IAction<SpotifyApi.MultipleAudioFeaturesResponse> => {\n  return { type: TRACKS_ATTRIBUTES.RECEIVE_TRACKS_ATTRIBUTES, data };\n};\n\nexport const fetchTracksAttributes = (\n  api: SpotifyWebApi,\n  trackIds: string[]\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<SpotifyApi.MultipleAudioFeaturesResponse>> => {\n  return (dispatch: Dispatch<IAction<SpotifyApi.MultipleAudioFeaturesResponse>>): Promise<void> => {\n    return api\n      .getAudioFeaturesForTracks(trackIds)\n      .then((response: Response<SpotifyApi.MultipleAudioFeaturesResponse>) => {\n        dispatch(receiveTrackAttributes(response.body));\n      });\n  };\n};\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\nimport { IAction, IRootState, Response } from 'common/interfaces';\n\nexport enum TOP_ARTISTS {\n  RECEIVE_TOP_ARTISTS_LONG_TERM = 'topArtsits/RECEIVE_TOP_ARTISTS_LONG_TERM',\n  RECEIVE_TOP_ARTISTS_MEDIUM_TERM = 'topArtsits/RECEIVE_TOP_ARTISTS_MEDIUM_TERM',\n  RECEIVE_TOP_ARTISTS_SHORT_TERM = 'topArtsits/RECEIVE_TOP_ARTISTS_SHORT_TERM',\n}\n\nexport const receiveTopArtistsLongTerm = (\n  data: SpotifyApi.UsersTopArtistsResponse\n): IAction<SpotifyApi.UsersTopArtistsResponse> => {\n  return { type: TOP_ARTISTS.RECEIVE_TOP_ARTISTS_LONG_TERM, data };\n};\n\nexport const receiveTopArtistsMediumTerm = (\n  data: SpotifyApi.UsersTopArtistsResponse\n): IAction<SpotifyApi.UsersTopArtistsResponse> => {\n  return { type: TOP_ARTISTS.RECEIVE_TOP_ARTISTS_MEDIUM_TERM, data };\n};\n\nexport const receiveTopArtistsShortTerm = (\n  data: SpotifyApi.UsersTopArtistsResponse\n): IAction<SpotifyApi.UsersTopArtistsResponse> => {\n  return { type: TOP_ARTISTS.RECEIVE_TOP_ARTISTS_SHORT_TERM, data };\n};\n\nexport const fetchTopArtists = (\n  api: SpotifyWebApi,\n  timeRange: 'long_term' | 'medium_term' | 'short_term'\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<SpotifyApi.UsersTopArtistsResponse>> => {\n  return (dispatch: Dispatch<IAction<SpotifyApi.UsersTopArtistsResponse>>): Promise<void> => {\n    return api\n      .getMyTopArtists({ time_range: timeRange })\n      .then((response: Response<SpotifyApi.UsersTopArtistsResponse>) => {\n        if (timeRange === 'long_term') {\n          dispatch(receiveTopArtistsLongTerm(response.body));\n        } else if (timeRange === 'medium_term') {\n          dispatch(receiveTopArtistsMediumTerm(response.body));\n        } else {\n          dispatch(receiveTopArtistsShortTerm(response.body));\n        }\n      });\n  };\n};\n","import { SnackbarProps } from '@material-ui/core';\n\nimport { IAction } from 'common/interfaces';\n\nexport enum SNACKBAR {\n  OPEN = 'snackbar/OPEN',\n  CLOSE = 'snackbar/CLOSE',\n}\n\nexport const openSnackbar = (data: Partial<SnackbarProps>): IAction<Partial<SnackbarProps>> => {\n  return { type: SNACKBAR.OPEN, data };\n};\n\nexport const closeSnackbar = (): IAction<unknown> => {\n  return { type: SNACKBAR.CLOSE, data: undefined };\n};\n","import { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { withRouter } from 'react-router-dom';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport SignIn from './SignIn';\nimport { setGlobalSpotifyClient, fetchUser } from 'common/actions';\nimport { IAction, IRootState } from 'common/interfaces';\nimport { IStateProps, IDispatchProps } from './interfaces';\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<IRootState, null, IAction<string> | IAction<SpotifyApi.CurrentUsersProfileResponse>>\n): IDispatchProps => {\n  return {\n    setGlobalSpotifyClient: (token: string) => dispatch(setGlobalSpotifyClient(token)),\n    fetchUser: (api: SpotifyWebApi) => dispatch(fetchUser(api)),\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SignIn));\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SignIn from 'components/SignIn';\n\nimport './styles.scss';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n    backgroundColor: '#1D1E28',\n  },\n  image: {\n    backgroundImage:\n      'url(https://images.unsplash.com/photo-1507808973436-a4ed7b5e87c9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2000&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor: '#1D1E28',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    backgroundColor: '#1D1E28',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: '#1D1E28',\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignInSide() {\n  const classes = useStyles();\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square className={'apollos-playlist__home-page'}>\n        <div className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h5\" style={{ color: 'white ' }}>\n            Apollo's Playlist\n          </Typography>\n          <SignIn />\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n","import { withRouter } from 'react-router-dom';\n\nimport HomePage from './HomePage';\n\nexport default withRouter(HomePage);\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { IAction, Response, IRootState } from 'common/interfaces';\n\nexport enum PLAYLIST {\n  RECEIVE_PLAYLIST = 'playlist/RECEIVE_PLAYLIST',\n}\n\nexport const receivePlaylist = (\n  data: SpotifyApi.SinglePlaylistResponse\n): IAction<SpotifyApi.SinglePlaylistResponse> => {\n  return { type: PLAYLIST.RECEIVE_PLAYLIST, data };\n};\n\nexport const fetchPlaylist = (\n  api: SpotifyWebApi,\n  playlistId: string\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<SpotifyApi.SinglePlaylistResponse>> => {\n  return (dispatch: Dispatch<IAction<SpotifyApi.SinglePlaylistResponse>>): Promise<void> => {\n    return api.getPlaylist(playlistId).then((response: Response<SpotifyApi.SinglePlaylistResponse>) => {\n      dispatch(receivePlaylist(response.body));\n    });\n  };\n};\n","import * as React from 'react';\n\nimport { TNotFoundProps } from './interfaces';\n\nclass NotFound extends React.PureComponent<TNotFoundProps> {\n  public render(): JSX.Element {\n    return <div>Not Found</div>;\n  }\n}\n\nexport default NotFound;\n","import { withRouter } from 'react-router-dom';\n\nimport NotFound from './NotFound';\n\nexport default withRouter(NotFound);\n","export const capitalizeFirstLetter = (str: string): string => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const buttonTheme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      containedPrimary: {\n        backgroundColor: '#1D1E28',\n        '&:hover': {\n          backgroundColor: 'grey',\n        },\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const sliderTheme = createMuiTheme({\n  overrides: {\n    MuiSlider: {\n      thumbColorPrimary: {\n        backgroundColor: '#1D1E28',\n      },\n      track: {\n        backgroundColor: '#1D1E28',\n      },\n      rail: {\n        backgroundColor: 'gray',\n      },\n      valueLabel: {\n        color: '#1D1E28',\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const inputTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#1D1E28',\n      dark: '#1D1E28',\n    },\n  },\n  overrides: {\n    MuiInput: {\n      root: {\n        width: '100%',\n      },\n    },\n\n    MuiFormControl: {\n      root: {\n        width: '100%',\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const chipTheme = createMuiTheme({\n  overrides: {\n    MuiChip: {\n      root: {\n        margin: '8px',\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const tableTheme = createMuiTheme({\n  overrides: {\n    MuiTableCell: {\n      root: {\n        paddingLeft: '0px',\n        paddingRight: '8px',\n        paddingTop: '4px',\n        paddingBottom: '4px',\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const linearProgresTheme = createMuiTheme({\n  overrides: {\n    MuiLinearProgress: {\n      root: {\n        height: 10,\n        borderRadius: 5,\n      },\n      colorPrimary: {\n        backgroundColor: 'grey',\n      },\n      barColorPrimary: {\n        backgroundColor: '#1D1E28',\n      },\n      bar: {\n        borderRadius: 5,\n      },\n    },\n  },\n});\n","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { Table, TableContainer, TableRow, TableCell, TableBody, Typography, LinearProgress } from '@material-ui/core';\nimport PersonIcon from '@material-ui/icons/Person';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport { capitalizeFirstLetter, millisecondsToViewableFormat } from 'common/helpers';\nimport { playlistToTrackIds, normalizeTrackAudioFeature } from './helpers';\nimport { IAudioFeatures } from 'common/interfaces';\nimport { TPlaylistProps, IPlaylistState } from './interfaces';\n\nimport { tableTheme, linearProgresTheme } from 'common/themes';\n\nclass Playlist extends React.Component<TPlaylistProps, IPlaylistState> {\n  public constructor(props: TPlaylistProps) {\n    super(props);\n\n    this.state = { loading: true };\n  }\n\n  public componentDidMount(): void {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n    let { location, spotifyWebApi, fetchPlaylist, fetchTracksAttributes } = this.props;\n\n    let playlistId: string = location.pathname.substring(location.pathname.lastIndexOf('/') + 1);\n\n    if (playlistId !== this.props.playlist?.id) {\n      fetchPlaylist(spotifyWebApi, playlistId).then(() => {\n        let { playlist } = this.props;\n\n        if (!playlist) return;\n        fetchTracksAttributes(spotifyWebApi, playlistToTrackIds(playlist));\n      });\n    }\n\n    this.setState({ loading: false });\n  }\n\n  public renderPlaylistArtwork(playlist: SpotifyApi.SinglePlaylistResponse): JSX.Element | null {\n    if (!playlist || !playlist.images || playlist.images.length === 0) return null;\n\n    return (\n      <img\n        src={playlist.images[0].url}\n        style={{ maxWidth: '300px', maxHeight: '300px ' }}\n        alt={`${playlist.name} playlist artwork`}\n      />\n    );\n  }\n\n  public renderPlaylistName(playlist: SpotifyApi.SinglePlaylistResponse): JSX.Element | null {\n    if (!playlist) return null;\n\n    return <Typography>{playlist.name}</Typography>;\n  }\n\n  public renderPlaylistOwner(playlist: SpotifyApi.SinglePlaylistResponse): JSX.Element | null {\n    if (!playlist) return null;\n\n    return (\n      <div style={{ display: 'flex', alignItems: 'row' }}>\n        <PersonIcon />\n        <Typography>{playlist.owner.display_name}</Typography>\n      </div>\n    );\n  }\n\n  public renderAttributeBar(normalizedData: IAudioFeatures, attribute: keyof IAudioFeatures): JSX.Element {\n    return (\n      <div>\n        <Typography>{capitalizeFirstLetter(attribute)}</Typography>\n        <ThemeProvider theme={linearProgresTheme}>\n          <LinearProgress variant=\"determinate\" value={normalizedData[attribute]} />\n        </ThemeProvider>\n      </div>\n    );\n  }\n\n  public renderPlaylistAnalysis(tracksAttributes: SpotifyApi.MultipleAudioFeaturesResponse): JSX.Element | null {\n    if (!tracksAttributes) return null;\n\n    let normalizedData: IAudioFeatures = normalizeTrackAudioFeature(tracksAttributes);\n\n    return (\n      <Grid container spacing={1} direction={'column'}>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'acousticness')}</Grid>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'danceability')}</Grid>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'energy')}</Grid>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'instrumentalness')}</Grid>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'valence')}</Grid>\n      </Grid>\n    );\n  }\n\n  public renderTracks(playlist: SpotifyApi.SinglePlaylistResponse): JSX.Element | null {\n    if (!playlist) return null;\n\n    return (\n      <ThemeProvider theme={tableTheme}>\n        <TableContainer>\n          <Table>\n            <TableBody>\n              {playlist.tracks.items.map((track: SpotifyApi.PlaylistTrackObject) => (\n                <TableRow hover key={`table-row-${track.track.id}`}>\n                  <TableCell style={{ width: '50px' }}>\n                    <img\n                      style={{ maxHeight: '50px', maxWidth: '50px' }}\n                      src={track.track.album.images[0].url}\n                      alt={'Album artwork for the song'}\n                    />\n                  </TableCell>\n                  <TableCell style={{ display: 'felx', flexDirection: 'column' }}>\n                    <div>{track.track.name}</div>\n                    <div>\n                      {track.track.artists[0].name} - {track.track.album.name}\n                    </div>\n                  </TableCell>\n                  <TableCell>{millisecondsToViewableFormat(track.track.duration_ms)}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ThemeProvider>\n    );\n  }\n\n  public render(): JSX.Element | null {\n    let { location, playlist, tracksAttributes } = this.props;\n    let { loading } = this.state;\n\n    let playlistId: string = location.pathname.substring(location.pathname.lastIndexOf('/') + 1);\n\n    if (!playlist || playlist.id !== playlistId) return null;\n    if (!tracksAttributes) return null;\n\n    return (\n      <Grid container spacing={3}>\n        {loading && (\n          <Grid item xs={12}>\n            <ThemeProvider theme={linearProgresTheme}>\n              <LinearProgress />\n            </ThemeProvider>\n          </Grid>\n        )}\n\n        <Grid item xs={12} md={6}>\n          {this.renderPlaylistArtwork(playlist)}\n        </Grid>\n        <Grid item xs={12} md={6}>\n          {this.renderPlaylistName(playlist)}\n          <br />\n          {this.renderPlaylistOwner(playlist)}\n          <br />\n          {this.renderPlaylistAnalysis(tracksAttributes)}\n        </Grid>\n        <Grid item xs={12}>\n          {this.renderTracks(playlist)}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default Playlist;\n","import { IAudioFeatures } from 'common/interfaces';\n\nexport const playlistToTrackIds = (playlist: SpotifyApi.SinglePlaylistResponse): string[] => {\n  return playlist.tracks.items.map((item: SpotifyApi.PlaylistTrackObject) => {\n    return item.track.id;\n  });\n};\n\nexport const normalizeTrackAudioFeature = (\n  tracksAttributes: SpotifyApi.MultipleAudioFeaturesResponse\n): IAudioFeatures => {\n  let normalized: IAudioFeatures = {\n    acousticness: 0.0,\n    danceability: 0.0,\n    energy: 0.0,\n    instrumentalness: 0.0,\n    valence: 0.0,\n  };\n\n  let count: number = tracksAttributes.audio_features.length;\n\n  tracksAttributes.audio_features.forEach((feature: SpotifyApi.AudioFeaturesObject) => {\n    normalized.acousticness += feature.acousticness;\n    normalized.danceability += feature.danceability;\n    normalized.energy += feature.energy;\n    normalized.instrumentalness += feature.instrumentalness;\n    normalized.valence += feature.valence;\n  });\n\n  normalized.acousticness = (normalized.acousticness / count) * 100;\n  normalized.danceability = (normalized.danceability / count) * 100;\n  normalized.energy = (normalized.energy / count) * 100;\n  normalized.instrumentalness = (normalized.instrumentalness / count) * 100;\n  normalized.valence = (normalized.valence / count) * 100;\n\n  return normalized;\n};\n","export const millisecondsToViewableFormat = (input: number): string => {\n  let totalHours,\n    totalMinutes,\n    totalSeconds,\n    hours,\n    minutes,\n    seconds,\n    result = '';\n\n  totalSeconds = input / 1000;\n  totalMinutes = totalSeconds / 60;\n  totalHours = totalMinutes / 60;\n\n  seconds = Math.floor(totalSeconds) % 60;\n  minutes = Math.floor(totalMinutes) % 60;\n  hours = Math.floor(totalHours) % 60;\n\n  if (hours !== 0) {\n    result += hours + ':';\n\n    if (minutes.toString().length === 1) {\n      minutes = '0' + minutes;\n    }\n  }\n\n  result += minutes + ':';\n\n  if (seconds.toString().length === 1) {\n    seconds = '0' + seconds;\n  }\n\n  result += seconds;\n\n  return result;\n};\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { PLAYLIST_RESULTS_PER_PAGE } from 'common/constants';\nimport { IAction, Response, IPagingObject, IRootState, IPaginationOptions } from 'common/interfaces';\n\nexport enum PLAYLISTS {\n  RECEIVE_PLAYLISTS = 'playlists/RECEIVE_PLAYLISTS',\n  CLEAR = 'playlist/CLEAR',\n}\n\nexport const receivePlaylist = (\n  data: IPagingObject<SpotifyApi.PlaylistObjectSimplified>\n): IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>> => {\n  return { type: PLAYLISTS.RECEIVE_PLAYLISTS, data };\n};\n\nexport const clearPlaylist = (): IAction<unknown> => {\n  return { type: PLAYLISTS.CLEAR, data: undefined };\n};\n\nexport const fetchPlaylists = (\n  api: SpotifyWebApi,\n  userId: string,\n  options: IPaginationOptions\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>>> => {\n  return (dispatch: Dispatch<IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>>>): Promise<void> => {\n    return api.getUserPlaylists(userId, options).then((response: Response<SpotifyApi.ListOfUsersPlaylistsResponse>) => {\n      let data: IPagingObject<SpotifyApi.PlaylistObjectSimplified> = {\n        total: response.body.total,\n        items: {\n          [options.offset / PLAYLIST_RESULTS_PER_PAGE + 1]: response.body.items,\n        },\n      };\n\n      dispatch(receivePlaylist(data));\n    });\n  };\n};\n","import { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { withRouter } from 'react-router-dom';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport Playlist from './Playlist';\nimport { fetchTracksAttributes } from 'common/actions';\nimport { fetchPlaylist } from './actions';\nimport { IAction, IRootState } from 'common/interfaces';\nimport { IStateProps, IDispatchProps } from './interfaces';\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<\n    IRootState,\n    null,\n    IAction<SpotifyApi.SinglePlaylistResponse> | IAction<SpotifyApi.MultipleAudioFeaturesResponse>\n  >\n): IDispatchProps => {\n  return {\n    fetchPlaylist: (api: SpotifyWebApi, playlistId: string) => dispatch(fetchPlaylist(api, playlistId)),\n    fetchTracksAttributes: (api: SpotifyWebApi, tracksId: string[]) => dispatch(fetchTracksAttributes(api, tracksId)),\n  };\n};\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n    playlist: state.playlist,\n    tracksAttributes: state.tracksAttributes,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Playlist));\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  CardMedia,\n  Card,\n  CardActionArea,\n  CardContent,\n  Typography,\n  createMuiTheme,\n  ThemeProvider,\n} from '@material-ui/core';\n\nconst cardTheme = createMuiTheme({\n  overrides: {\n    MuiCard: {\n      root: {\n        boxShadow: 'none',\n        '&:hover': {\n          boxShadow:\n            '0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)',\n        },\n      },\n    },\n  },\n});\n\nclass PlaylistCard extends React.PureComponent<SpotifyApi.PlaylistObjectSimplified> {\n  public render(): JSX.Element {\n    let { name, images, id } = this.props;\n\n    return (\n      <Link to={`/playlists/${id}`} style={{ textDecoration: 'none' }}>\n        <ThemeProvider theme={cardTheme}>\n          <Card>\n            <CardActionArea>\n              {images[0] && (\n                <CardMedia\n                  style={{ padding: '16px' }}\n                  component=\"img\"\n                  alt={`${name} playlist artwork`}\n                  image={images[0].url}\n                  title={name}\n                />\n              )}\n              <CardContent>\n                <Typography>{name}</Typography>\n              </CardContent>\n            </CardActionArea>\n          </Card>\n        </ThemeProvider>\n      </Link>\n    );\n  }\n}\n\nexport { PlaylistCard };\n","import * as React from 'react';\nimport { LinearProgress, ThemeProvider, Grid } from '@material-ui/core';\nimport Pagination from '@material-ui/lab/Pagination';\n\nimport { PlaylistCard } from './subcomponents';\nimport { PLAYLIST_RESULTS_PER_PAGE } from 'common/constants';\nimport { TPlaylistsProps, IPlaylistsState } from './interfaces';\n\nimport { linearProgresTheme } from 'common/themes';\n\nclass Playlists extends React.Component<TPlaylistsProps, IPlaylistsState> {\n  public constructor(props: TPlaylistsProps) {\n    super(props);\n\n    this.state = {\n      page: 1,\n      loading: true,\n    };\n  }\n\n  public async componentDidMount(): Promise<void> {\n    let { location, spotifyWebApi, fetchPlaylists, user, playlists } = this.props;\n\n    // no URL params\n    if (location.search === '') {\n      if (playlists === null) {\n        await fetchPlaylists(spotifyWebApi, user!.id, {\n          limit: PLAYLIST_RESULTS_PER_PAGE,\n          offset: 0,\n        });\n      }\n    }\n\n    this.setState({ loading: false });\n  }\n\n  public handlePaginationChange = (_: React.ChangeEvent<unknown>, page: number) => {\n    let { fetchPlaylists, spotifyWebApi, user, playlists } = this.props;\n    if (playlists!.items[page] === undefined) {\n      fetchPlaylists(spotifyWebApi, user!.id, {\n        limit: PLAYLIST_RESULTS_PER_PAGE,\n        offset: (page - 1) * PLAYLIST_RESULTS_PER_PAGE,\n      });\n    }\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n    this.setState({ page });\n  };\n\n  public render(): JSX.Element {\n    let { playlists } = this.props;\n    let { page, loading } = this.state;\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Grid container spacing={3}>\n          {loading && (\n            <Grid item xs={12}>\n              <ThemeProvider theme={linearProgresTheme}>\n                <LinearProgress />\n              </ThemeProvider>\n            </Grid>\n          )}\n\n          {playlists &&\n            playlists.items[page] &&\n            playlists.items[page].map((playlist: SpotifyApi.PlaylistObjectSimplified) => {\n              return (\n                <Grid item xs={12} md={6} lg={4} xl={3} key={`playlist-card-${playlist.id}`}>\n                  <PlaylistCard {...playlist} />\n                </Grid>\n              );\n            })}\n        </Grid>\n        {playlists && playlists.items && (\n          <Pagination\n            count={Math.floor(playlists.total / PLAYLIST_RESULTS_PER_PAGE)}\n            page={page}\n            onChange={this.handlePaginationChange}\n            style={{ paddingTop: '16px' }}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Playlists;\n","export const PLAYLIST_RESULTS_PER_PAGE: number = 8;\n","import { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { withRouter } from 'react-router-dom';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport Playlists from './Playlists';\nimport { fetchPlaylists } from './actions';\nimport { IPaginationOptions, IAction, IPagingObject, IRootState } from 'common/interfaces';\nimport { IStateProps, IDispatchProps } from './interfaces';\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<IRootState, null, IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>>>\n): IDispatchProps => {\n  return {\n    fetchPlaylists: (api: SpotifyWebApi, userId: string, options: IPaginationOptions) =>\n      dispatch(fetchPlaylists(api, userId, options)),\n  };\n};\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n    user: state.user,\n    playlists: state.playlists,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Playlists));\n","import * as React from 'react';\nimport {\n  Typography,\n  Grid,\n  ThemeProvider,\n  Button,\n  Select,\n  Chip,\n  Slider,\n  Input,\n  MenuItem,\n  Avatar,\n  FormHelperText,\n  FormControl,\n  TextField,\n} from '@material-ui/core';\n\nimport { capitalizeFirstLetter } from 'common/helpers';\nimport { Response, IAudioFeatures } from 'common/interfaces';\nimport { TCreatePlaylistProps, ICreatePlaylistState } from './interfaces';\n\nimport { buttonTheme, sliderTheme, inputTheme, chipTheme } from 'common/themes';\n\nclass CreatePlaylist extends React.Component<TCreatePlaylistProps, ICreatePlaylistState> {\n  public constructor(props: TCreatePlaylistProps) {\n    super(props);\n\n    this.state = {\n      query: {\n        acousticness: {\n          min: 0.0,\n          max: 1.0,\n        },\n        danceability: {\n          min: 0.0,\n          max: 1.0,\n        },\n        energy: {\n          min: 0.0,\n          max: 1.0,\n        },\n        instrumentalness: {\n          min: 0.0,\n          max: 1.0,\n        },\n        valence: {\n          min: 0.0,\n          max: 1.0,\n        },\n      },\n      selectedArtistsIds: [],\n      playlistName: '',\n    };\n  }\n\n  public componentDidMount = (): void => {\n    let { fetchTopArtists, spotifyWebApi } = this.props;\n\n    fetchTopArtists(spotifyWebApi, 'short_term');\n    fetchTopArtists(spotifyWebApi, 'medium_term');\n    fetchTopArtists(spotifyWebApi, 'long_term');\n  };\n\n  public valueLabelFormat = (value: number, _: number): string => {\n    return Math.round(value * 100).toString();\n  };\n\n  public handleSliderChange = (attr: keyof IAudioFeatures) => {\n    return (_: React.ChangeEvent<{}>, newValue: number[]) => {\n      let state: ICreatePlaylistState = this.state;\n      state.query[attr] = { min: newValue[0], max: newValue[1] };\n\n      this.setState(state);\n    };\n  };\n\n  public handlePlaylistNameChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    this.setState({\n      playlistName: event.target.value,\n    });\n  };\n\n  public handleArtistSelect = (event: React.ChangeEvent<{ value: unknown }>) => {\n    this.setState({\n      selectedArtistsIds: (event.target.value as unknown) as string[],\n    });\n  };\n\n  public handleCreatePlaylistClick = (_: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    let {\n      query: { acousticness, danceability, energy, instrumentalness, valence },\n    } = this.state;\n    this.props.spotifyWebApi\n      .getRecommendations({\n        min_acousticness: acousticness.min,\n        max_acousticness: acousticness.max,\n        min_danceability: danceability.min,\n        max_danceability: danceability.max,\n        min_energy: energy.min,\n        max_energy: energy.max,\n        min_instrumentalness: instrumentalness.min,\n        max_instrumentalness: instrumentalness.max,\n        min_valence: valence.min,\n        max_valence: valence.max,\n        seed_artists: this.state.selectedArtistsIds,\n        limit: 50,\n      })\n      .then((response: Response<SpotifyApi.RecommendationsFromSeedsResponse>) => {\n        if (response.body.tracks.length > 0) {\n          this.props.spotifyWebApi\n            .createPlaylist(this.props.user.id, this.state.playlistName)\n            .then((playlist: Response<SpotifyApi.CreatePlaylistResponse>) => {\n              let tracks: ReadonlyArray<string> = response.body.tracks.map(\n                (track: SpotifyApi.TrackObjectSimplified) => track.uri\n              );\n\n              this.props.spotifyWebApi.addTracksToPlaylist(playlist.body.id, tracks).then(() => {\n                this.props.clearPlaylist();\n                this.props.history.push(`/playlists/${playlist.body.id}`);\n              });\n            });\n        } else {\n          this.props.openSnackBar({\n            open: true,\n            message: 'Oops! Looks like you need to broaden your selection',\n          });\n        }\n      });\n  };\n\n  public renderPlaylistNameInput = (): JSX.Element => {\n    return (\n      <>\n        <Typography>Playlist name</Typography>\n        <TextField value={this.state.playlistName} onChange={this.handlePlaylistNameChange} />\n      </>\n    );\n  };\n\n  public renderAttributeSlider = (attribute: keyof IAudioFeatures): JSX.Element => {\n    return (\n      <>\n        <Typography>{capitalizeFirstLetter(attribute as string)}</Typography>\n        <ThemeProvider theme={sliderTheme}>\n          <Slider\n            valueLabelDisplay={'auto'}\n            valueLabelFormat={this.valueLabelFormat}\n            min={0}\n            max={1}\n            step={0.01}\n            value={[this.state.query[attribute].min, this.state.query[attribute].max]}\n            onChange={\n              (this.handleSliderChange(attribute) as unknown) as (\n                event: React.ChangeEvent<{}>,\n                value: number | number[]\n              ) => void\n            }\n          />\n        </ThemeProvider>\n      </>\n    );\n  };\n\n  public renderArtistSelect = (artists: SpotifyApi.ArtistObjectFull[]): JSX.Element => {\n    let { selectedArtistsIds } = this.state;\n\n    return (\n      <>\n        <Typography>Suggested artists</Typography>\n        <ThemeProvider theme={inputTheme}>\n          <FormControl error>\n            <Select\n              error={selectedArtistsIds.length > 3}\n              multiple\n              value={selectedArtistsIds}\n              onChange={this.handleArtistSelect}\n              input={<Input multiline />}\n              renderValue={(selected) => (\n                <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                  {(selected as string[]).map((value) => (\n                    <ThemeProvider theme={chipTheme} key={value}>\n                      <Chip\n                        label={artists.find((a) => a.id === value)?.name}\n                        avatar={<Avatar src={artists.find((a) => a.id === value)?.images[0].url} />}\n                      />\n                    </ThemeProvider>\n                  ))}\n                </div>\n              )}\n            >\n              {artists\n                .sort((a: SpotifyApi.ArtistObjectFull, b: SpotifyApi.ArtistObjectFull) =>\n                  a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n                )\n                .map(\n                  (artist: SpotifyApi.ArtistObjectFull): JSX.Element => (\n                    <MenuItem key={artist.name} value={artist.id}>\n                      {artist.name}\n                    </MenuItem>\n                  )\n                )}\n            </Select>\n            {selectedArtistsIds.length > 3 && <FormHelperText>Please select 1 - 3 artists</FormHelperText>}\n          </FormControl>\n        </ThemeProvider>\n      </>\n    );\n  };\n\n  public render = (): JSX.Element => {\n    let { selectedArtistsIds, playlistName } = this.state;\n\n    let attributes: (keyof IAudioFeatures)[] = [\n      'acousticness',\n      'danceability',\n      'energy',\n      'instrumentalness',\n      'valence',\n    ];\n\n    let artists: SpotifyApi.ArtistObjectFull[] = [];\n\n    let { topArtists } = this.props;\n\n    if (topArtists && topArtists.longTerm && topArtists.mediumTerm && topArtists.shortTerm) {\n      let { longTerm, mediumTerm, shortTerm } = topArtists;\n\n      artists = artists.concat(longTerm.items.concat(mediumTerm.items.concat(shortTerm.items)));\n\n      artists = artists.filter((e, i) => artists.findIndex((a) => a.id === e.id) === i);\n    }\n\n    return (\n      <Grid container spacing={3} alignItems={'center'}>\n        <Grid item xs={12}>\n          <Typography variant={'h6'}>Create a playlist</Typography>\n        </Grid>\n\n        <Grid item xs={12}>\n          {this.renderPlaylistNameInput()}\n        </Grid>\n\n        <Grid item xs={12}>\n          {this.renderArtistSelect(artists)}\n        </Grid>\n\n        {attributes.map(\n          (attribute: keyof IAudioFeatures): JSX.Element => {\n            return (\n              <Grid item xs={12} key={`slider-${attribute}`}>\n                {this.renderAttributeSlider(attribute)}\n              </Grid>\n            );\n          }\n        )}\n\n        <Grid container direction={'row'} justify={'center'}>\n          <Grid item>\n            <ThemeProvider theme={buttonTheme}>\n              <Button\n                variant={'contained'}\n                color={'primary'}\n                size={'medium'}\n                onClick={this.handleCreatePlaylistClick}\n                disabled={selectedArtistsIds.length === 0 || selectedArtistsIds.length > 3 || playlistName === ''}\n              >\n                Create\n              </Button>\n            </ThemeProvider>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  };\n}\n\nexport default CreatePlaylist;\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { SnackbarProps } from '@material-ui/core';\n\nimport CreatePlaylist from './CreatePlaylist';\nimport { fetchTopArtists, openSnackbar } from 'common/actions';\nimport { clearPlaylist } from 'components/Playlists/actions';\nimport { IRootState, IAction } from 'common/interfaces';\nimport { IStateProps, IDispatchProps } from './interfaces';\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<\n    IRootState,\n    null,\n    IAction<SpotifyApi.UsersTopArtistsResponse> | IAction<Partial<SnackbarProps>> | IAction<unknown>\n  >\n): IDispatchProps => {\n  return {\n    fetchTopArtists: (api: SpotifyWebApi, timeRange: 'long_term' | 'medium_term' | 'short_term') =>\n      dispatch(fetchTopArtists(api, timeRange)),\n    openSnackBar: (data: Partial<SnackbarProps>) => dispatch(openSnackbar(data)),\n    clearPlaylist: () => dispatch(clearPlaylist()),\n  };\n};\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n    user: state.user!,\n    tracksAttributes: state.tracksAttributes,\n    topArtists: state.topArtists,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreatePlaylist));\n","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { MapStateToPropsParam, connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Divider, Avatar } from '@material-ui/core';\n\nimport { IRootState } from 'common/interfaces';\n\nexport interface IProfileProps {}\n\nexport interface IStateProps {\n  user: SpotifyApi.CurrentUsersProfileResponse | null;\n}\n\nexport type TProfileProps = IProfileProps & IStateProps & RouteComponentProps;\n\nclass Profile extends React.PureComponent<TProfileProps> {\n  public render(): JSX.Element | null {\n    let { user } = this.props;\n\n    if (!user) return null;\n\n    return (\n      <div>\n        <Divider />\n        <br />\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar\n            alt={user.display_name}\n            src={user.images && user.images[0] && user.images[0].url}\n            style={{\n              width: '100px',\n              height: '100px',\n            }}\n          />\n          <h1\n            style={{\n              color: 'white',\n              padding: '8px 16px',\n              wordWrap: 'break-word',\n            }}\n          >\n            {user.display_name}\n          </h1>\n          <Divider />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToPropsParam<IStateProps, IProfileProps, IRootState> = (\n  state: IRootState\n): IStateProps => {\n  return {\n    user: state.user,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(Profile));\n","import * as React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { Button, ThemeProvider, Typography } from '@material-ui/core';\nimport Cookies from 'js-cookie';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport { setGlobalSpotifyClient } from 'common/actions';\nimport { IAction, IRootState } from 'common/interfaces';\n\nimport { buttonTheme } from 'common/themes';\n\nexport interface ISignOutProps {}\n\nexport interface IDispatchProps {\n  setGlobalSpotifyClient: (token: string) => IAction<string>;\n}\n\nexport interface IStateProps {\n  spotifyWebApi: SpotifyWebApi;\n}\n\nexport type TSignOutProps = ISignOutProps & IStateProps & IDispatchProps & RouteComponentProps;\n\nclass SignOut extends React.PureComponent<TSignOutProps> {\n  public onClickHandler = (_: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    let { setGlobalSpotifyClient, history } = this.props;\n\n    Cookies.remove('spotify-bearer', { path: '/auth', sameSite: 'none', secure: true });\n    setGlobalSpotifyClient('');\n    history.push('/');\n  };\n\n  public render(): JSX.Element {\n    return (\n      <div>\n        <ThemeProvider theme={buttonTheme}>\n          <Button onClick={this.onClickHandler}>\n            <Typography style={{ color: 'white' }}>Sign out</Typography>\n          </Button>\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction<string>>): IDispatchProps => {\n  return {\n    setGlobalSpotifyClient: (token: string) => dispatch(setGlobalSpotifyClient(token)),\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SignOut));\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MusicNote from '@material-ui/icons/MusicNote';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\n\nimport Profile from './subcomponents/Profile';\nimport SignOut from './subcomponents/SignOut';\nimport { Link } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    drawer: {\n      [theme.breakpoints.up('sm')]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n    appBar: {\n      backgroundColor: '#1D1E28',\n      [theme.breakpoints.up('sm')]: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n      },\n\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      ...theme.mixins.toolbar,\n\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    drawerPaper: {\n      width: drawerWidth,\n      backgroundColor: '#1D1E28',\n    },\n    content: {\n      flexGrow: 1,\n      backgroundColor: '#d3d3d3',\n      padding: theme.spacing(3),\n    },\n  })\n);\n\nexport default function ResponsiveDrawer(props: any) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const drawer = (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        height: 'inherit',\n      }}\n    >\n      <div>\n        <h1 style={{ color: 'white', padding: '8px 16px' }}>Apollo's Playlist</h1>\n        <Divider />\n        <List>\n          <Link to={'/playlists'} style={{ textDecoration: 'none' }}>\n            <ListItem button key={'Playlists'}>\n              <MusicNote style={{ color: 'white' }} />\n              <ListItemText primary={'Playlists'} style={{ color: 'white' }} />\n            </ListItem>\n          </Link>\n\n          <Link to={'/create-playlist'} style={{ textDecoration: 'none' }}>\n            <ListItem button key={'Create a Playlist'}>\n              <MusicNote style={{ color: 'white' }} />\n              <ListItemText primary={'Create a Playlist'} style={{ color: 'white' }} />\n            </ListItem>\n          </Link>\n        </List>\n        <Divider />\n      </div>\n      <div>\n        <Profile />\n        <Divider />\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <SignOut />\n        </div>\n      </div>\n    </div>\n  );\n\n  const container = document.body;\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Apollo's Playlist\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            <React.Fragment>{drawer}</React.Fragment>\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {props.children}\n      </main>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport { Snackbar } from '@material-ui/core';\n\nimport HomePage from 'components/HomePage';\nimport NotFound from 'components/NotFound';\nimport Playlist from 'components/Playlist';\nimport Playlists from 'components/Playlists';\nimport CreatePlaylist from 'components/CreatePlaylist';\nimport ResponsiveDrawer from 'components/ResponsiveDrawer/ResponsiveDrawer';\n\nimport { TAppProps } from './interfaces';\n\nimport './styles.scss';\n\nclass App extends React.PureComponent<TAppProps> {\n  public async componentDidMount() {\n    let { setGlobalSpotifyClient, fetchUser, history } = this.props;\n    if (Cookies.get('spotify-bearer')) {\n      setGlobalSpotifyClient(Cookies.get('spotify-bearer')!);\n    }\n\n    let { spotifyWebApi } = this.props;\n\n    if (spotifyWebApi.getAccessToken() !== undefined) {\n      await fetchUser(spotifyWebApi).then((_: void) => {\n        if (history.location.pathname === '/') {\n          history.push('/playlists');\n        }\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    let { closeSnackbar, snackbar, spotifyWebApi } = this.props;\n    let isLoggedIn: boolean = spotifyWebApi.getAccessToken() !== undefined && spotifyWebApi.getAccessToken() !== '';\n\n    if (!isLoggedIn) {\n      return (\n        <div className=\"apollos-playlist-container\">\n          <HomePage />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"apollos-playlist-container\">\n        <ResponsiveDrawer>\n          <Snackbar {...snackbar} onClose={closeSnackbar} />\n          <Switch>\n            <Route exact path={['/', '/playlists']} component={Playlists} />\n            <Route path={'/playlists/:playlistId'} component={Playlist} />\n            <Route exact path={'/create-playlist'} component={CreatePlaylist} />\n            <Route path=\"*\" component={NotFound} />\n          </Switch>\n        </ResponsiveDrawer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport App from './App';\nimport { setGlobalSpotifyClient, fetchUser, closeSnackbar, openSnackbar } from 'common/actions';\nimport { IAction, IRootState } from 'common/interfaces';\nimport { IDispatchProps, IStateProps } from './interfaces';\nimport { SnackbarProps } from '@material-ui/core';\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n    user: state.user,\n    snackbar: state.snackbar,\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<\n    IRootState,\n    null,\n    | IAction<string>\n    | IAction<SpotifyApi.CurrentUsersProfileResponse>\n    | IAction<unknown>\n    | IAction<Partial<SnackbarProps>>\n  >\n): IDispatchProps => {\n  return {\n    setGlobalSpotifyClient: (token: string) => dispatch(setGlobalSpotifyClient(token)),\n    fetchUser: (api: SpotifyWebApi) => dispatch(fetchUser(api)),\n    openSnackbar: (data: Partial<SnackbarProps>) => dispatch(openSnackbar(data)),\n    closeSnackbar: () => dispatch(closeSnackbar()),\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","import merge from 'lodash/merge';\nimport { SnackbarProps } from '@material-ui/core';\n\nimport { IAction } from 'common/interfaces';\nimport { SNACKBAR } from 'common/actions/snackbar';\n\nexport const initialSnackbarState: SnackbarProps = {\n  open: false,\n  message: '',\n  autoHideDuration: 10000,\n  anchorOrigin: { vertical: 'bottom', horizontal: 'right' },\n};\n\nexport const snackBarReducer = (\n  state: SnackbarProps = initialSnackbarState,\n  action: IAction<Partial<SnackbarProps>>\n): SnackbarProps => {\n  switch (action.type) {\n    case SNACKBAR.OPEN:\n      return merge({}, state, action.data);\n\n    case SNACKBAR.CLOSE:\n      return merge({}, state, { ...state, open: false });\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\nimport { clientReducer, userReducer, tracksAttributesReducer } from 'common/reducers';\nimport { playlistsReducer } from 'components/Playlists/reducer';\nimport { playlistReducer } from 'components/Playlist/reducer';\nimport { topArtistsReducer } from 'components/TopArtists/reducer';\nimport { snackBarReducer } from 'components/Snackbar/reducer';\n\nexport default combineReducers({\n  spotifyWebApi: clientReducer,\n  user: userReducer,\n  playlists: playlistsReducer,\n  playlist: playlistReducer,\n  tracksAttributes: tracksAttributesReducer,\n  topArtists: topArtistsReducer,\n  snackbar: snackBarReducer,\n});\n","import SpotifyWebApi from 'spotify-web-api-node';\n\nimport { clientId, redirectUri } from 'authorization';\n\nimport { SPOTIFT_API } from 'common/actions';\nimport { IAction } from 'common/interfaces';\n\nexport const clientReducer = (\n  state: SpotifyWebApi = new SpotifyWebApi({\n    clientId,\n    redirectUri,\n  }),\n  action: IAction<string>\n): SpotifyWebApi => {\n  switch (action.type) {\n    case SPOTIFT_API.SET_GLOBAL_SPOTIFY_CLIENT_TOKEN:\n      state.setAccessToken(action.data);\n\n      return state;\n\n    default:\n      return state;\n  }\n};\n","import { USER } from 'common/actions';\nimport { IAction } from 'common/interfaces';\n\nexport const userReducer = (\n  state: SpotifyApi.CurrentUsersProfileResponse | null = null,\n  action: IAction<SpotifyApi.CurrentUsersProfileResponse>\n): SpotifyApi.CurrentUsersProfileResponse | null => {\n  switch (action.type) {\n    case USER.RECEIVE_USER:\n      return action.data;\n\n    default:\n      return state;\n  }\n};\n","import merge from 'lodash/merge';\n\nimport { PLAYLISTS } from './actions';\nimport { IAction, IPagingObject } from 'common/interfaces';\n\nexport const playlistsReducer = (\n  state: IPagingObject<SpotifyApi.PlaylistObjectSimplified> | null = null,\n  action: IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>>\n): IPagingObject<SpotifyApi.PlaylistObjectSimplified> | null => {\n  switch (action.type) {\n    case PLAYLISTS.RECEIVE_PLAYLISTS:\n      return merge({}, state, action.data);\n\n    case PLAYLISTS.CLEAR:\n      return null;\n\n    default:\n      return state;\n  }\n};\n","import merge from 'lodash/merge';\n\nimport { PLAYLIST } from './actions';\nimport { IAction } from 'common/interfaces';\n\nexport const playlistReducer = (\n  state: SpotifyApi.SinglePlaylistResponse | null = null,\n  action: IAction<SpotifyApi.SinglePlaylistResponse>\n): SpotifyApi.SinglePlaylistResponse | null => {\n  switch (action.type) {\n    case PLAYLIST.RECEIVE_PLAYLIST:\n      return merge({}, state, action.data);\n\n    default:\n      return state;\n  }\n};\n","import merge from 'lodash/merge';\n\nimport { TRACKS_ATTRIBUTES } from 'common/actions';\nimport { IAction } from 'common/interfaces';\n\nexport const tracksAttributesReducer = (\n  state: SpotifyApi.MultipleAudioFeaturesResponse | null = null,\n  action: IAction<SpotifyApi.MultipleAudioFeaturesResponse>\n): SpotifyApi.MultipleAudioFeaturesResponse | null => {\n  switch (action.type) {\n    case TRACKS_ATTRIBUTES.RECEIVE_TRACKS_ATTRIBUTES:\n      return merge({}, state, action.data);\n\n    default:\n      return state;\n  }\n};\n","import merge from 'lodash/merge';\n\nimport { TOP_ARTISTS } from 'common/actions/topArtists';\nimport { IAction } from 'common/interfaces';\n\nexport const topArtistsReducer = (\n  state: ITopArtistsReducer | null = null,\n  action: IAction<SpotifyApi.UsersTopArtistsResponse>\n): ITopArtistsReducer | null => {\n  switch (action.type) {\n    case TOP_ARTISTS.RECEIVE_TOP_ARTISTS_LONG_TERM:\n      return merge({}, state, { longTerm: action.data });\n\n    case TOP_ARTISTS.RECEIVE_TOP_ARTISTS_MEDIUM_TERM:\n      return merge({}, state, { mediumTerm: action.data });\n\n    case TOP_ARTISTS.RECEIVE_TOP_ARTISTS_SHORT_TERM:\n      return merge({}, state, { shortTerm: action.data });\n\n    default:\n      return state;\n  }\n};\n\nexport interface ITopArtistsReducer {\n  longTerm: SpotifyApi.UsersTopArtistsResponse | null;\n  mediumTerm: SpotifyApi.UsersTopArtistsResponse | null;\n  shortTerm: SpotifyApi.UsersTopArtistsResponse | null;\n}\n","import { createStore, applyMiddleware, Store } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport { clientId, redirectUri } from 'authorization';\n\nimport { initialSnackbarState } from 'components/Snackbar/reducer';\nimport rootReducer from './rootReducer';\nimport { IRootState } from 'common/interfaces';\n\nconst defaultState: IRootState = {\n  spotifyWebApi: new SpotifyWebApi({\n    clientId: clientId,\n    redirectUri: redirectUri,\n  }),\n  user: null,\n  playlist: null,\n  playlists: null,\n  tracksAttributes: null,\n  topArtists: null,\n  snackbar: initialSnackbarState,\n};\n\nconst configureStore = (preloadedState: IRootState = defaultState): Store<IRootState> => {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    process.env.NODE_ENV === 'development' ? composeWithDevTools(applyMiddleware(thunk)) : applyMiddleware(thunk)\n  );\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Store } from 'redux';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from 'core/app';\nimport configureStore from 'redux/store';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const root: HTMLElement = document.getElementById('root') as HTMLElement;\n  const store: Store = configureStore();\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>,\n    root\n  );\n});\n"],"sourceRoot":""}