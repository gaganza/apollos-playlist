{"version":3,"sources":["common/actions/user.ts","authorization/auth.ts","components/SignIn/SignIn.tsx","common/actions/tracksAttributes.ts","common/actions/topArtists.ts","common/actions/snackbar.ts","components/SignIn/index.ts","components/HomePage/HomePage.tsx","components/HomePage/index.ts","components/Playlist/actions.ts","components/NotFound/NotFound.tsx","components/NotFound/index.ts","common/helpers/stringHelpers.ts","common/themes/button.ts","common/themes/slider.ts","common/themes/input.ts","common/themes/chip.ts","common/themes/table.ts","common/themes/linearProgressTheme.ts","components/Playlist/Playlist.tsx","components/Playlist/helpers/formatHelpers.ts","common/helpers/dateTimeHelpers.ts","components/Playlists/actions.ts","components/Playlist/index.ts","components/Playlists/subcomponents/PlaylistCard.tsx","components/Playlists/Playlists.tsx","common/constants/pagination.ts","components/Playlists/index.ts","components/CreatePlaylist/CreatePlaylist.tsx","components/CreatePlaylist/index.ts","components/ResponsiveDrawer/subcomponents/Profile.tsx","components/ResponsiveDrawer/subcomponents/SignOut.tsx","components/ResponsiveDrawer/ResponsiveDrawer.tsx","core/app/App.tsx","core/app/index.ts","components/Snackbar/reducer.ts","redux/rootReducer.ts","common/reducers/spotifyClient.ts","common/reducers/user.ts","components/Playlists/reducer.ts","components/Playlist/reducer.ts","common/reducers/tracksAttributes.ts","components/TopArtists/reducer.ts","redux/store.ts","index.tsx"],"names":["USER","authEndpoint","scopes","clientId","redirectUri","SignIn","componentDidMount","a","props","history","spotifyWebApi","fetchUser","location","pathname","indexOf","treatedPathname","substring","setAccessToken","URLSearchParams","get","then","_","push","render","params","client_id","encodeURI","redirect_uri","scope","join","response_type","className","href","toString","React","TRACKS_ATTRIBUTES","api","dispatch","getMe","response","data","body","type","RECEIVE_USER","TOP_ARTISTS","fetchTracksAttributes","trackIds","getAudioFeaturesForTracks","RECEIVE_TRACKS_ATTRIBUTES","SNACKBAR","fetchTopArtists","timeRange","getMyTopArtists","time_range","RECEIVE_TOP_ARTISTS_LONG_TERM","RECEIVE_TOP_ARTISTS_MEDIUM_TERM","receiveTopArtistsMediumTerm","RECEIVE_TOP_ARTISTS_SHORT_TERM","receiveTopArtistsShortTerm","openSnackbar","OPEN","withRouter","connect","state","useStyles","makeStyles","theme","root","height","backgroundColor","image","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","avatar","form","width","marginTop","submit","PLAYLIST","classes","Grid","container","component","CssBaseline","item","xs","sm","md","Paper","elevation","square","Typography","variant","style","color","NotFound","capitalizeFirstLetter","str","charAt","toUpperCase","slice","buttonTheme","createMuiTheme","overrides","MuiButton","containedPrimary","textTransform","sliderTheme","MuiSlider","thumbColorPrimary","track","rail","valueLabel","inputTheme","palette","primary","main","dark","MuiInput","MuiFormControl","chipTheme","MuiChip","tableTheme","MuiTableCell","paddingLeft","paddingRight","paddingTop","paddingBottom","linearProgresTheme","MuiLinearProgress","borderRadius","colorPrimary","barColorPrimary","bar","Playlist","window","scrollTo","top","behavior","fetchPlaylist","playlistId","lastIndexOf","playlist","id","tracks","items","map","playlistToTrackIds","setState","loading","renderPlaylistArtwork","images","length","src","url","maxWidth","maxHeight","alt","name","renderPlaylistName","renderPlaylistOwner","owner","display_name","renderAttributeBar","normalizedData","attribute","ThemeProvider","LinearProgress","value","renderPlaylistAnalysis","tracksAttributes","normalized","acousticness","danceability","energy","instrumentalness","valence","count","audio_features","forEach","feature","normalizeTrackAudioFeature","direction","renderTracks","TableContainer","Table","TableBody","TableRow","hover","key","TableCell","album","artists","input","totalHours","totalMinutes","totalSeconds","hours","minutes","seconds","result","Math","floor","millisecondsToViewableFormat","duration_ms","PLAYLISTS","getPlaylist","RECEIVE_PLAYLIST","tracksId","cardTheme","MuiCard","boxShadow","PlaylistCard","to","textDecoration","Card","CardActionArea","CardMedia","padding","title","CardContent","Playlists","fetchPlaylists","user","playlists","search","limit","offset","handlePaginationChange","page","undefined","lg","xl","Pagination","total","onChange","userId","options","getUserPlaylists","RECEIVE_PLAYLISTS","receivePlaylist","CreatePlaylist","valueLabelFormat","round","handleSliderChange","attr","newValue","query","min","max","handlePlaylistNameChange","event","playlistName","target","handleArtistSelect","selectedArtistsIds","handleCreatePlaylistClick","getRecommendations","min_acousticness","max_acousticness","min_danceability","max_danceability","min_energy","max_energy","min_instrumentalness","max_instrumentalness","min_valence","max_valence","seed_artists","createPlaylist","uri","addTracksToPlaylist","clearPlaylist","openSnackBar","open","message","alphabetizeArtists","sort","b","renderPlaylistNameInput","TextField","renderAttributeSlider","Slider","valueLabelDisplay","step","renderChip","Chip","label","find","Avatar","renderArtistSelect","FormControl","error","Select","multiple","Input","multiline","renderValue","selected","flexWrap","artist","MenuItem","FormHelperText","topArtists","longTerm","mediumTerm","shortTerm","concat","filter","e","i","findIndex","justify","Button","size","onClick","disabled","CLEAR","Profile","Divider","wordWrap","SignOut","onClickHandler","resetAccessToken","createStyles","drawer","breakpoints","up","flexShrink","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","content","flexGrow","ResponsiveDrawer","useTheme","useState","mobileOpen","setMobileOpen","handleDrawerToggle","justifyContent","List","ListItem","button","ListItemText","document","AppBar","position","Toolbar","IconButton","aria-label","edge","noWrap","Hidden","smUp","implementation","Drawer","anchor","onClose","ModalProps","keepMounted","Fragment","xsDown","children","App","expiresIn","Date","setSeconds","getSeconds","Number","setInterval","clearInterval","autoHideDuration","anchorOrigin","horizontal","vertical","closeSnackbar","snackbar","getAccessToken","Snackbar","exact","path","HomePage","CLOSE","initialSnackbarState","combineReducers","SpotifyWebApi","action","merge","defaultState","configureStore","preloadedState","createStore","rootReducer","applyMiddleware","thunk","addEventListener","getElementById","store","ReactDOM"],"mappings":"+OAMYA,E,+JCMCC,EAAuB,0CAEvBC,EAAmB,CAC9B,8BACA,yBACA,gBACA,wBACA,0BACA,mBACA,4BACA,qBAKWC,EACmE,mCAEnEC,EACwD,8CCetDC,G,mNAtCNC,kB,sBAAoB,wCAAAC,EAAA,2DACmB,EAAKC,MAA3CC,EADmB,EACnBA,QAASC,EADU,EACVA,cAAeC,EADL,EACKA,UACxBC,EAAaH,EAAbG,UAKoC,KAJpCC,EAAaD,EAAbC,UAIOC,QAAQ,gBAPI,uBAYnBC,EAA0B,IAAMF,EAASG,UAAU,GAEvDN,EAAcO,eAAe,IAAIC,gBAAgBH,GAAiBI,IAAI,iBAd/C,SAgBjBR,EAAUD,GAAeU,MAAK,SAACC,GACnCZ,EAAQa,KAAK,iBAjBQ,2C,EAsBpBC,OAAS,WACd,IAAIC,EAA0B,IAAIN,gBAAgB,CAChDO,UAAWC,UAAUvB,GACrBwB,aAAcD,UAAUtB,GACxBwB,MAAO1B,EAAO2B,KAAK,OACnBC,cAAeJ,UDVe,WCahC,OACE,qBAAGK,UAAU,iBAAiBC,KAAM/B,EAAeuB,EAAOS,YAA1D,qB,YAhCeC,mB,SFDTlC,K,kCAAAA,M,KAIL,IGJKmC,EHUCxB,EAAY,SACvByB,GAEA,OAAO,SAACC,GACN,OAAOD,EAAIE,QAAQlB,MAAK,SAACmB,GAVF,IACzBC,EAUIH,GAVJG,EAUyBD,EAASE,KAR3B,CAAEC,KAAM1C,EAAK2C,aAAcH,gB,SGPxBL,K,uEAAAA,M,KAIL,ICLKS,EDWCC,EAAwB,SACnCT,EACAU,GAEA,OAAO,SAACT,GACN,OAAOD,EACJW,0BAA0BD,GAC1B1B,MAAK,SAACmB,GAbyB,IACpCC,EAaMH,GAbNG,EAasCD,EAASE,KAXxC,CAAEC,KAAMP,EAAkBa,0BAA2BR,gB,SCRlDI,K,yEAAAA,E,6EAAAA,E,4EAAAA,M,KAML,ICPKK,EDyBCC,EAAkB,SAC7Bd,EACAe,GAEA,OAAO,SAACd,GACN,OAAOD,EACJgB,gBAAgB,CAAEC,WAAYF,IAC9B/B,MAAK,SAACmB,GAzB4B,IACvCC,EA0BQH,EADgB,cAAdc,GAzBVX,EA0B2CD,EAASE,KAxB7C,CAAEC,KAAME,EAAYU,8BAA+Bd,SAyB3B,gBAAdW,EAtBwB,SACzCX,GAEA,MAAO,CAAEE,KAAME,EAAYW,gCAAiCf,QAoB3CgB,CAA4BjB,EAASE,MAjBd,SACxCD,GAEA,MAAO,CAAEE,KAAME,EAAYa,+BAAgCjB,QAgB1CkB,CAA2BnB,EAASE,a,SCtC3CQ,K,qBAAAA,E,wBAAAA,M,KAKL,IAAMU,EAAe,SAACnB,GAC3B,MAAO,CAAEE,KAAMO,EAASW,KAAMpB,SCcjBqB,cAAWC,aAdF,SAACC,GACvB,MAAO,CACLrD,cAAeqD,EAAMrD,kBAIE,SACzB2B,GAEA,MAAO,CACL1B,UAAW,SAACyB,GAAD,OAAwBC,EAAS1B,EAAUyB,QAIhC0B,CAA6CzD,ICdjE2D,G,OAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,OAAQ,QACRC,gBAAiB,WAEnBC,MAAO,CACLC,gBACE,8IACFC,iBAAkB,YAClBH,gBAAiB,UACjBI,eAAgB,QAChBC,mBAAoB,UAEtBC,MAAO,CACLC,OAAQV,EAAMW,QAAQ,EAAG,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZX,gBAAiB,WAEnBY,OAAQ,CACNL,OAAQV,EAAMW,QAAQ,GACtBR,gBAAiB,WAEnBa,KAAM,CACJC,MAAO,OACPC,UAAWlB,EAAMW,QAAQ,IAE3BQ,OAAQ,CACNT,OAAQV,EAAMW,QAAQ,EAAG,EAAG,SCnCjBhB,ICEHyB,EDFGzB,eDuCA,WACb,IAAM0B,EAAUvB,IAEhB,OACE,kBAACwB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,OAAO3D,UAAWwD,EAAQpB,MAClD,kBAACwB,EAAA,EAAD,MACA,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAI,EAAOC,GAAI,EAAGC,GAAI,EAAGhE,UAAWwD,EAAQjB,QACvD,kBAACkB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGL,UAAWM,IAAOC,UAAW,EAAGC,QAAM,EAACnE,UAAW,+BACjF,yBAAKA,UAAWwD,EAAQZ,OACtB,kBAACwB,EAAA,EAAD,CAAYT,UAAU,KAAKU,QAAQ,KAAKC,MAAO,CAAEC,MAAO,WAAxD,qBAGA,kBAAC,EAAD,YG7CKC,E,4MALNhF,OAAS,WACd,OAAO,yC,YAFYW,iBCAR2B,cAAW0C,G,iFCJbC,EAAwB,SAACC,GACpC,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,I,iBCCpCC,EAAcC,IAAe,CACxCC,UAAW,CACTC,UAAW,CACTC,iBAAkB,CAChBC,cAAe,OACf7C,gBAAiB,UACjB,UAAW,CACTA,gBAAiB,aCPd8C,GAAcL,IAAe,CACxCC,UAAW,CACTK,UAAW,CACTC,kBAAmB,CACjBhD,gBAAiB,WAEnBiD,MAAO,CACLjD,gBAAiB,WAEnBkD,KAAM,CACJlD,gBAAiB,QAEnBmD,WAAY,CACVlB,MAAO,eCbFmB,GAAaX,IAAe,CACvCY,QAAS,CACPC,QAAS,CACPC,KAAM,UACNC,KAAM,YAGVd,UAAW,CACTe,SAAU,CACR3D,KAAM,CACJgB,MAAO,SAIX4C,eAAgB,CACd5D,KAAM,CACJgB,MAAO,YChBF6C,GAAYlB,IAAe,CACtCC,UAAW,CACTkB,QAAS,CACP9D,KAAM,CACJS,OAAQ,WCJHsD,GAAapB,IAAe,CACvCC,UAAW,CACToB,aAAc,CACZhE,KAAM,CACJiE,YAAa,MACbC,aAAc,MACdC,WAAY,MACZC,cAAe,WCPVC,GAAqB1B,IAAe,CAC/CC,UAAW,CACT0B,kBAAmB,CACjBtE,KAAM,CACJC,OAAQ,GACRsE,aAAc,GAEhBC,aAAc,CACZtE,gBAAiB,QAEnBuE,gBAAiB,CACfvE,gBAAiB,WAEnBwE,IAAK,CACHH,aAAc,OCwJPI,G,kDA1Jb,WAAmBtI,GAAwB,IAAD,8BACxC,cAAMA,IAKDF,kBAAoB,WAAa,IAAD,EACrCyI,OAAOC,SAAS,CAAEC,IAAK,EAAGC,SAAU,WADC,MAEmC,EAAK1I,MAAvEI,EAF+B,EAE/BA,SAAUF,EAFqB,EAErBA,cAAeyI,EAFM,EAENA,cAAetG,EAFT,EAESA,sBAE1CuG,EAAqBxI,EAASC,SAASG,UAAUJ,EAASC,SAASwI,YAAY,KAAO,GAEtFD,KAAU,UAAK,EAAK5I,MAAM8I,gBAAhB,aAAK,EAAqBC,KACtCJ,EAAczI,EAAe0I,GAAYhI,MAAK,WAAO,IAC7CkI,EAAa,EAAK9I,MAAlB8I,SAEDA,GACLzG,EAAsBnC,EC7BI,SAAC4I,GACjC,OAAOA,EAASE,OAAOC,MAAMC,KAAI,SAAC9D,GAChC,OAAOA,EAAK0B,MAAMiC,MD2BuBI,CAAmBL,OAI5D,EAAKM,SAAS,CAAEC,SAAS,KArBe,EAwBnCC,sBAAwB,SAACR,GAC9B,OAAKA,GAAaA,EAASS,QAAqC,IAA3BT,EAASS,OAAOC,OAGnD,uBACEC,IAAKX,EAASS,OAAO,GAAGG,IACxB7D,MAAO,CAAE8D,SAAU,QAASC,UAAW,UACvCC,IAAG,UAAKf,EAASgB,KAAd,uBANmE,MAzBlC,EAoCnCC,mBAAqB,SAACjB,GAC3B,OAAKA,EAEE,gBAACnD,EAAA,EAAD,KAAamD,EAASgB,MAFP,MArCkB,EA0CnCE,oBAAsB,SAAClB,GAC5B,OAAKA,EAGH,uBAAKjD,MAAO,CAAEvB,QAAS,OAAQE,WAAY,QACzC,gBAAC,IAAD,MACA,gBAACmB,EAAA,EAAD,KAAamD,EAASmB,MAAMC,eALV,MA3CkB,EAqDnCC,mBAAqB,SAACC,EAAgCC,GAC3D,OACE,2BACE,gBAAC1E,EAAA,EAAD,KAAaK,EAAsBqE,IACnC,gBAACC,EAAA,EAAD,CAAe5G,MAAOsE,IACpB,gBAACuC,EAAA,EAAD,CAAgB3E,QAAQ,cAAc4E,MAAOJ,EAAeC,QA1D1B,EAgEnCI,uBAAyB,SAACC,GAC/B,IAAKA,EAAkB,OAAO,KAE9B,IAAIN,ECzEkC,SACxCM,GAEA,IAAIC,EAA6B,CAC/BC,aAAc,EACdC,aAAc,EACdC,OAAQ,EACRC,iBAAkB,EAClBC,QAAS,GAGPC,EAAgBP,EAAiBQ,eAAe1B,OAgBpD,OAdAkB,EAAiBQ,eAAeC,SAAQ,SAACC,GACvCT,EAAWC,cAAgBQ,EAAQR,aACnCD,EAAWE,cAAgBO,EAAQP,aACnCF,EAAWG,QAAUM,EAAQN,OAC7BH,EAAWI,kBAAoBK,EAAQL,iBACvCJ,EAAWK,SAAWI,EAAQJ,WAGhCL,EAAWC,aAAgBD,EAAWC,aAAeK,EAAS,IAC9DN,EAAWE,aAAgBF,EAAWE,aAAeI,EAAS,IAC9DN,EAAWG,OAAUH,EAAWG,OAASG,EAAS,IAClDN,EAAWI,iBAAoBJ,EAAWI,iBAAmBE,EAAS,IACtEN,EAAWK,QAAWL,EAAWK,QAAUC,EAAS,IAE7CN,ED8CgCU,CAA2BX,GAEhE,OACE,gBAAC1F,EAAA,EAAD,CAAMC,WAAS,EAACZ,QAAS,EAAGiH,UAAW,UACrC,gBAACtG,EAAA,EAAD,CAAMI,MAAI,GAAE,EAAK+E,mBAAmBC,EAAgB,iBACpD,gBAACpF,EAAA,EAAD,CAAMI,MAAI,GAAE,EAAK+E,mBAAmBC,EAAgB,iBACpD,gBAACpF,EAAA,EAAD,CAAMI,MAAI,GAAE,EAAK+E,mBAAmBC,EAAgB,WACpD,gBAACpF,EAAA,EAAD,CAAMI,MAAI,GAAE,EAAK+E,mBAAmBC,EAAgB,qBACpD,gBAACpF,EAAA,EAAD,CAAMI,MAAI,GAAE,EAAK+E,mBAAmBC,EAAgB,cA3EhB,EAgFnCmB,aAAe,SAACzC,GACrB,OAAKA,EAGH,gBAACwB,EAAA,EAAD,CAAe5G,MAAOgE,IACpB,gBAAC8D,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,KACG5C,EAASE,OAAOC,MAAMC,KAAI,SAACpC,GAAD,OACzB,gBAAC6E,EAAA,EAAD,CAAUC,OAAK,EAACC,IAAG,oBAAe/E,EAAMA,MAAMiC,KAC5C,gBAAC+C,EAAA,EAAD,CAAWjG,MAAO,CAAElB,MAAO,SACzB,uBACEkB,MAAO,CAAE+D,UAAW,OAAQD,SAAU,QACtCF,IACE3C,EAAMA,MAAMiF,MAAMxC,QAAUzC,EAAMA,MAAMiF,MAAMxC,OAAO,IAAMzC,EAAMA,MAAMiF,MAAMxC,OAAO,GAAGG,IACnF5C,EAAMA,MAAMiF,MAAMxC,OAAO,GAAGG,IAC5B,GAENG,IAAK,gCAGT,gBAACiC,EAAA,EAAD,CAAWjG,MAAO,CAAEvB,QAAS,OAAQC,cAAe,WAClD,2BAAMuC,EAAMA,MAAMgD,MAClB,2BACGhD,EAAMA,MAAMkF,QAAQ,GAAGlC,KAD1B,MACmChD,EAAMA,MAAMiF,MAAMjC,OAGvD,gBAACgC,EAAA,EAAD,KEzH0B,SAACG,GAC3C,IAAIC,EACFC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAS,GA0BX,OAtBAN,GADAC,GADAC,EAAeH,EAAQ,KACO,IACF,GAE5BM,EAAUE,KAAKC,MAAMN,GAAgB,GACrCE,EAAUG,KAAKC,MAAMP,GAAgB,GAGvB,KAFdE,EAAQI,KAAKC,MAAMR,GAAc,MAG/BM,GAAUH,EAAQ,IAEgB,IAA9BC,EAAQ7K,WAAW+H,SACrB8C,EAAU,IAAMA,IAIpBE,GAAUF,EAAU,IAEc,IAA9BC,EAAQ9K,WAAW+H,SACrB+C,EAAU,IAAMA,GAGlBC,GAAUD,EF0FkBI,CAA6B7F,EAAMA,MAAM8F,sBA1B7C,MAjFkB,EAqHnC7L,OAAS,WAA2B,IAAD,EACO,EAAKf,MAA9CI,EADkC,EAClCA,SAAU0I,EADwB,EACxBA,SAAU4B,EADc,EACdA,iBACpBrB,EAAY,EAAK9F,MAAjB8F,QAEFT,EAAqBxI,EAASC,SAASG,UAAUJ,EAASC,SAASwI,YAAY,KAAO,GAE1F,OAAKC,GAAYA,EAASC,KAAOH,GAC5B8B,EAGH,gBAAC1F,EAAA,EAAD,CAAMC,WAAS,EAACZ,QAAS,GACtBgF,GACC,gBAACrE,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACb,gBAACiF,EAAA,EAAD,CAAe5G,MAAOsE,IACpB,gBAACuC,EAAA,EAAD,QAKN,gBAACvF,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIE,GAAI,GACpB,EAAK+D,sBAAsBR,IAE9B,gBAAC9D,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIE,GAAI,GACpB,EAAKwE,mBAAmBjB,GACzB,2BACC,EAAKkB,oBAAoBlB,GAC1B,2BACC,EAAK2B,uBAAuBC,IAE/B,gBAAC1F,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACZ,EAAKkG,aAAazC,KAxB2B,MAxHpD,EAAKvF,MAAQ,CAAE8F,SAAS,GAHgB,E,UADrB3H,c,SVPXoD,K,8CAAAA,M,KAIL,IaHK+H,GbSClE,GAAgB,SAC3B/G,EACAgH,GAEA,OAAO,SAAC/G,GACN,OAAOD,EAAIkL,YAAYlE,GAAYhI,MAAK,SAACmB,GAXd,IAC7BC,EAWIH,GAXJG,EAW6BD,EAASE,KAT/B,CAAEC,KAAM4C,EAASiI,iBAAkB/K,ecmB7BqB,eAAWC,aARF,SAACC,GACvB,MAAO,CACLrD,cAAeqD,EAAMrD,cACrB4I,SAAUvF,EAAMuF,SAChB4B,iBAAkBnH,EAAMmH,qBAjBD,SACzB7I,GAMA,MAAO,CACL8G,cAAe,SAAC/G,EAAoBgH,GAArB,OAA4C/G,EAAS8G,GAAc/G,EAAKgH,KACvFvG,sBAAuB,SAACT,EAAoBoL,GAArB,OAA4CnL,EAASQ,EAAsBT,EAAKoL,QAYjF1J,CAA6CgF,K,4DCpBjE2E,GAAY3G,aAAe,CAC/BC,UAAW,CACT2G,QAAS,CACPvJ,KAAM,CACJwJ,UAAW,OACX,UAAW,CACTA,UACE,6GAONC,G,4MACGrM,OAAS,WAAoB,IAAD,EACN,EAAKf,MAA1B8J,EAD2B,EAC3BA,KAAMP,EADqB,EACrBA,OAAQR,EADa,EACbA,GAEpB,OACE,gBAAC,IAAD,CAAMsE,GAAE,qBAAgBtE,GAAMlD,MAAO,CAAEyH,eAAgB,SACrD,gBAAChD,EAAA,EAAD,CAAe5G,MAAOuJ,IACpB,gBAACM,GAAA,EAAD,KACE,gBAACC,GAAA,EAAD,KACGjE,EAAO,IACN,gBAACkE,GAAA,EAAD,CACE5H,MAAO,CAAE6H,QAAS,QAClBxI,UAAU,MACV2E,IAAG,UAAKC,EAAL,qBACHhG,MAAOyF,EAAO,GAAGG,IACjBiE,MAAO7D,IAGX,gBAAC8D,GAAA,EAAD,KACE,gBAACjI,EAAA,EAAD,KAAamE,S,YAnBFpI,iBCkEZmM,G,kDAjFb,WAAmB7N,GAAyB,IAAD,8BACzC,cAAMA,IAQDF,kBAToC,sBAShB,sCAAAC,EAAA,2DAC0C,EAAKC,MAAlEI,EADmB,EACnBA,SAAUF,EADS,EACTA,cAAe4N,EADN,EACMA,eAAgBC,EADtB,EACsBA,KAAMC,EAD5B,EAC4BA,UAG7B,KAApB5N,EAAS6N,OAJY,mBAKL,OAAdD,EALmB,gCAMfF,EAAe5N,EAAe6N,EAAMhF,GAAI,CAC5CmF,MC3BuC,ED4BvCC,OAAQ,IARW,OAazB,EAAK/E,SAAS,CAAEC,SAAS,IAbA,2CATgB,EAyBpC+E,uBAAyB,SAACvN,EAA+BwN,GAAwB,IAAD,EAC5B,EAAKrO,MAAxD8N,EAD+E,EAC/EA,eAAgB5N,EAD+D,EAC/DA,cAAe6N,EADgD,EAChDA,UACNO,IAFsD,EAC1CN,UAC5B/E,MAAMoF,IACnBP,EAAe5N,EAAe6N,EAAMhF,GAAI,CACtCmF,MCxCyC,EDyCzCC,OCzCyC,GDyChCE,EAAO,KAGpB9F,OAAOC,SAAS,CAAEC,IAAK,EAAGC,SAAU,WACpC,EAAKU,SAAS,CAAEiF,UAlCyB,EAqCpCtN,OAAS,WAAoB,IAC5BiN,EAAc,EAAKhO,MAAnBgO,UAD2B,EAET,EAAKzK,MAAvB8K,EAF2B,EAE3BA,KAAMhF,EAFqB,EAErBA,QAEZ,OACE,uBACExD,MAAO,CACLvB,QAAS,OACTC,cAAe,SACfC,WAAY,WAGd,gBAACQ,EAAA,EAAD,CAAMC,WAAS,EAACZ,QAAS,GACtBgF,GACC,gBAACrE,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACb,gBAACiF,EAAA,EAAD,CAAe5G,MAAOsE,IACpB,gBAACuC,EAAA,EAAD,QAKLyD,GACCA,EAAU/E,MAAMoF,IAChBL,EAAU/E,MAAMoF,GAAMnF,KAAI,SAACJ,GACzB,OACE,gBAAC9D,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIE,GAAI,EAAGgJ,GAAI,EAAGC,GAAI,EAAG3C,IAAG,wBAAmB/C,EAASC,KACrE,gBAAC,GAAiBD,QAK3BkF,GAAaA,EAAU/E,OACtB,gBAACwF,GAAA,EAAD,CACExD,MAAOwB,KAAKC,MAAMsB,EAAUU,MCjFS,GDkFrCL,KAAMA,EACNM,SAAU,EAAKP,uBACfvI,MAAO,CAAEiC,WAAY,YAtE7B,EAAKvE,MAAQ,CACX8K,KAAM,EACNhF,SAAS,GAL8B,E,UADrB3H,a,mBHHZmL,K,gDAAAA,E,wBAAAA,Q,KAKL,IAUMiB,GAAiB,SAC5BlM,EACAgN,EACAC,GAEA,OAAO,SAAChN,GACN,OAAOD,EAAIkN,iBAAiBF,EAAQC,GAASjO,MAAK,SAACmB,GACjD,IAAIC,EAA2D,CAC7D0M,MAAO3M,EAASE,KAAKyM,MACrBzF,MAAM,gBACH4F,EAAQV,OIhC8B,EJgCO,EAAIpM,EAASE,KAAKgH,QAIpEpH,EAxByB,SAC7BG,GAEA,MAAO,CAAEE,KAAM2K,GAAUkC,kBAAmB/M,QAqB/BgN,CAAgBhN,SKThBqB,eAAWC,aARF,SAACC,GACvB,MAAO,CACLrD,cAAeqD,EAAMrD,cACrB6N,KAAMxK,EAAMwK,KACZC,UAAWzK,EAAMyK,cAbM,SACzBnM,GAEA,MAAO,CACLiM,eAAgB,SAAClM,EAAoBgN,EAAgBC,GAArC,OACdhN,EAASiM,GAAelM,EAAKgN,EAAQC,QAYjBvL,CAA6CuK,K,oGCgQxDoB,G,kDAnQb,WAAmBjP,GAA8B,IAAD,8BAC9C,cAAMA,IA8BDF,kBAAoB,WAAa,IAAD,EACI,EAAKE,MAAxC0C,EAD+B,EAC/BA,gBAAiBxC,EADc,EACdA,cAEvBwC,EAAgBxC,EAAe,cAC/BwC,EAAgBxC,EAAe,eAC/BwC,EAAgBxC,EAAe,cApCe,EAuCzCgP,iBAAmB,SAAC1E,EAAe3J,GACxC,OAAO4L,KAAK0C,MAAc,IAAR3E,GAAa/I,YAxCe,EA2CzC2N,mBAAqB,SAACC,GAC3B,OAAO,SAACxO,EAA+ByO,GACrC,IAAI/L,EAA8B,EAAKA,MACvCA,EAAMgM,MAAMF,GAAQ,CAAEG,IAAKF,EAAS,GAAIG,IAAKH,EAAS,IAEtD,EAAKlG,SAAS7F,KAhD8B,EAoDzCmM,yBAA2B,SAACC,GACjC,EAAKvG,SAAS,CACZwG,aAAcD,EAAME,OAAOrF,SAtDiB,EA0DzCsF,mBAAqB,SAACH,GAE3B,EAAKvG,SAAS,CACZ2G,mBAAqBJ,EAAME,OAAOrF,SA7DU,EAiEzCwF,0BAA4B,SAACnP,GAAwD,IAAD,EAGrF,EAAK0C,MADPgM,MAAS3E,EAF8E,EAE9EA,aAAcC,EAFgE,EAEhEA,aAAcC,EAFkD,EAElDA,OAAQC,EAF0C,EAE1CA,iBAAkBC,EAFwB,EAExBA,QAEjE,EAAKhL,MAAME,cACR+P,mBAAmB,CAClBC,iBAAkBtF,EAAa4E,IAC/BW,iBAAkBvF,EAAa6E,IAC/BW,iBAAkBvF,EAAa2E,IAC/Ba,iBAAkBxF,EAAa4E,IAC/Ba,WAAYxF,EAAO0E,IACnBe,WAAYzF,EAAO2E,IACnBe,qBAAsBzF,EAAiByE,IACvCiB,qBAAsB1F,EAAiB0E,IACvCiB,YAAa1F,EAAQwE,IACrBmB,YAAa3F,EAAQyE,IACrBmB,aAAc,EAAKrN,MAAMwM,mBACzB7B,MAAO,KAERtN,MAAK,SAACmB,GACDA,EAASE,KAAK+G,OAAOQ,OAAS,EAChC,EAAKxJ,MAAME,cACR2Q,eAAe,EAAK7Q,MAAM+N,KAAKhF,GAAI,EAAKxF,MAAMqM,cAC9ChP,MAAK,SAACkI,GACL,IAAIE,EAAgCjH,EAASE,KAAK+G,OAAOE,KACvD,SAACpC,GAAD,OAA6CA,EAAMgK,OAGrD,EAAK9Q,MAAME,cAAc6Q,oBAAoBjI,EAAS7G,KAAK8G,GAAIC,GAAQpI,MAAK,WAC1E,EAAKZ,MAAMgR,gBACX,EAAKhR,MAAMC,QAAQa,KAAnB,qBAAsCgI,EAAS7G,KAAK8G,WAI1D,EAAK/I,MAAMiR,aAAa,CACtBC,MAAM,EACNC,QAAS,4DArG6B,EA2GzCC,mBAAqB,SAACpF,GAC3B,OAAOA,EAAQqF,MAAK,SAACtR,EAAgCuR,GAAjC,OAClBvR,EAAE+J,KAAOwH,EAAExH,MAAQ,EAAI/J,EAAE+J,KAAOwH,EAAExH,KAAO,EAAI,MA7GD,EAiHzCyH,wBAA0B,WAC/B,OACE,gCACE,gBAAC5L,EAAA,EAAD,sBACA,gBAAC6L,GAAA,EAAD,CAAWhH,MAAO,EAAKjH,MAAMqM,aAAcjB,SAAU,EAAKe,6BArHhB,EA0HzC+B,sBAAwB,SAACpH,GAC9B,OACE,gCACE,gBAAC1E,EAAA,EAAD,KAAaK,EAAsBqE,IACnC,gBAACC,EAAA,EAAD,CAAe5G,MAAOiD,IACpB,gBAAC+K,GAAA,EAAD,CACEC,kBAAmB,OACnBzC,iBAAkB,EAAKA,iBACvBM,IAAK,EACLC,IAAK,EACLmC,KAAM,IACNpH,MAAO,CAAC,EAAKjH,MAAMgM,MAAMlF,GAAWmF,IAAK,EAAKjM,MAAMgM,MAAMlF,GAAWoF,KACrEd,SACG,EAAKS,mBAAmB/E,QAvIW,EAkJzCwH,WAAa,SAAC7F,EAAwCxB,GAAgC,IAAD,IAC1F,OACE,gBAACF,EAAA,EAAD,CAAe5G,MAAO8D,GAAWqE,IAAKrB,GACpC,gBAACsH,GAAA,EAAD,CACEC,MAAK,UAAE/F,EAAQgG,MAAK,SAACjS,GAAD,OAAOA,EAAEgJ,KAAOyB,YAA/B,aAAE,EAAqCV,KAC5CrF,OAAQ,gBAACwN,GAAA,EAAD,CAAQxI,IAAG,UAAEuC,EAAQgG,MAAK,SAACjS,GAAD,OAAOA,EAAEgJ,KAAOyB,YAA/B,aAAE,EAAqCjB,OAAO,GAAGG,UAvJ5B,EA6JzCwI,mBAAqB,SAAClG,GAAyD,IAC9E+D,EAAuB,EAAKxM,MAA5BwM,mBAEN,OACE,gCACE,gBAACpK,EAAA,EAAD,qBACA,gBAAC2E,EAAA,EAAD,CAAe5G,MAAOuD,IACpB,gBAACkL,GAAA,EAAD,CAAaC,OAAK,GAChB,gBAACC,GAAA,EAAD,CACED,MAAOrC,EAAmBvG,OAAS,EACnC8I,UAAQ,EACR9H,MAAOuF,EACPpB,SAAU,EAAKmB,mBACf7D,MAAO,gBAACsG,GAAA,EAAD,CAAOC,WAAS,IACvBC,YAAa,SAACC,GAAD,OACX,uBAAK7M,MAAO,CAAEvB,QAAS,OAAQqO,SAAU,SACrCD,EAAsBxJ,KAAI,SAACsB,GAAD,OAAmB,EAAKqH,WAAW7F,EAASxB,SAI3E,EAAK4G,mBAAmBpF,GAAS9C,KAChC,SAAC0J,GAAD,OACE,gBAACC,GAAA,EAAD,CAAUhH,IAAK+G,EAAO9I,KAAMU,MAAOoI,EAAO7J,IACvC6J,EAAO9I,UAKfiG,EAAmBvG,OAAS,GAAK,gBAACsJ,GAAA,EAAD,wCAzLI,EAgMzC/R,OAAS,WAAoB,IAAD,EACU,EAAKwC,MAA1CwM,EAD2B,EAC3BA,mBAAoBH,EADO,EACPA,aAUtB5D,EAAyC,GAEvC+G,EAAe,EAAK/S,MAApB+S,WAEN,GAAIA,GAAcA,EAAWC,UAAYD,EAAWE,YAAcF,EAAWG,UAAW,CAAC,IACjFF,EAAoCD,EAApCC,SAAUC,EAA0BF,EAA1BE,WAAYC,EAAcH,EAAdG,UAI5BlH,GAFAA,EAAUA,EAAQmH,OAAOH,EAAS/J,MAAMkK,OAAOF,EAAWhK,MAAMkK,OAAOD,EAAUjK,UAE/DmK,QAAO,SAACC,EAAGC,GAAJ,OAAUtH,EAAQuH,WAAU,SAACxT,GAAD,OAAOA,EAAEgJ,KAAOsK,EAAEtK,QAAQuK,KAGjF,OACE,gBAACtO,EAAA,EAAD,CAAMC,WAAS,EAACZ,QAAS,EAAGG,WAAY,UACtC,gBAACQ,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACb,gBAACM,EAAA,EAAD,CAAYC,QAAS,MAArB,sBAGF,gBAACZ,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACZ,EAAKkM,2BAGR,gBAACvM,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACZ,EAAK6M,mBAAmBlG,IA/BY,CACzC,eACA,eACA,SACA,mBACA,WA6Bc9C,KACV,SAACmB,GACC,OACE,gBAACrF,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIwG,IAAG,iBAAYxB,IAC/B,EAAKoH,sBAAsBpH,OAMpC,gBAACrF,EAAA,EAAD,CAAMC,WAAS,EAACqG,UAAW,MAAOkI,QAAS,UACzC,gBAACxO,EAAA,EAAD,CAAMI,MAAI,GACR,gBAACkF,EAAA,EAAD,CAAe5G,MAAO2C,GACpB,gBAACoN,GAAA,EAAD,CACE7N,QAAS,YACTE,MAAO,UACP4N,KAAM,SACNC,QAAS,EAAK3D,0BACd4D,SAAwC,IAA9B7D,EAAmBvG,QAAgBuG,EAAmBvG,OAAS,GAAsB,KAAjBoG,GAE9E,gBAACjK,EAAA,EAAD,CAAYE,MAAO,CAAEa,cAAe,SAApC,gBAtPZ,EAAKnD,MAAQ,CACXgM,MAAO,CACL3E,aAAc,CACZ4E,IAAK,EACLC,IAAK,GAEP5E,aAAc,CACZ2E,IAAK,EACLC,IAAK,GAEP3E,OAAQ,CACN0E,IAAK,EACLC,IAAK,GAEP1E,iBAAkB,CAChByE,IAAK,EACLC,IAAK,GAEPzE,QAAS,CACPwE,IAAK,EACLC,IAAK,IAGTM,mBAAoB,GACpBH,aAAc,IA3B8B,E,UADrBlO,aCad2B,eAAWC,aATF,SAACC,GACvB,MAAO,CACLrD,cAAeqD,EAAMrD,cACrB6N,KAAMxK,EAAMwK,KACZrD,iBAAkBnH,EAAMmH,iBACxBqI,WAAYxP,EAAMwP,eApBK,SACzBlR,GAMA,MAAO,CACLa,gBAAiB,SAACd,EAAoBe,GAArB,OACfd,EAASa,EAAgBd,EAAKe,KAChCsO,aAAc,SAACjP,GAAD,OAAkCH,EAASsB,EAAanB,KACtEgP,cAAe,kBAAMnP,EPJhB,CAAEK,KAAM2K,GAAUgH,MAAO7R,UAAMsM,QOiBdhL,CAA6C2L,K,0KCpBjE6E,G,4MACG/S,OAAS,WAA2B,IACnCgN,EAAS,EAAK/N,MAAd+N,KAEN,OAAKA,EAGH,2BACE,gBAACgG,GAAA,EAAD,MACA,2BACA,uBACElO,MAAO,CACLvB,QAAS,OACTC,cAAe,SACfC,WAAY,WAGd,gBAACyN,GAAA,EAAD,CACEpI,IAAKkE,EAAK7D,aACVT,IAAKsE,EAAKxE,QAAUwE,EAAKxE,OAAO,IAAMwE,EAAKxE,OAAO,GAAGG,IACrD7D,MAAO,CACLlB,MAAO,QACPf,OAAQ,WAGZ,sBACEiC,MAAO,CACLC,MAAO,QACP4H,QAAS,WACTsG,SAAU,eAGXjG,EAAK7D,cAER,gBAAC6J,GAAA,EAAD,QA9BY,M,YAJArS,iBAiDP2B,eAAWC,aAR4D,SACpFC,GAEA,MAAO,CACLwK,KAAMxK,EAAMwK,QAIUzK,CAAyBwQ,KC/C7CG,G,4MACGC,eAAiB,SAACrT,GAA8D,IAAD,EACnD,EAAKb,MAAhCE,EAD8E,EAC9EA,cAAeD,EAD+D,EAC/DA,QAErBC,EAAciU,mBAEdlU,EAAQa,KAAK,M,EAGRC,OAAS,WACd,OACE,2BACE,gBAACuJ,EAAA,EAAD,CAAe5G,MAAO2C,GACpB,gBAACoN,GAAA,EAAD,CAAQE,QAAS,EAAKO,gBACpB,gBAACvO,EAAA,EAAD,CAAYE,MAAO,CAAEC,MAAO,QAASY,cAAe,SAApD,gB,YAdUhF,iBA2BP2B,eAAWC,aANF,SAACC,GACvB,MAAO,CACLrD,cAAeqD,EAAMrD,iBAICoD,CAAyB2Q,KCvB7CzQ,GAAYC,aAAW,SAACC,GAAD,aAC3B0Q,aAAa,CACXzQ,KAAM,CACJW,QAAS,QAEX+P,OAAO,gBACJ3Q,EAAM4Q,YAAYC,GAAG,MAAQ,CAC5B5P,MATY,IAUZ6P,WAAY,IAGhBC,QAAM,GACJ5Q,gBAAiB,WADb,eAEHH,EAAM4Q,YAAYC,GAAG,MAAQ,CAC5B5P,MAAM,eAAD,OAhBO,IAgBP,OACL+P,WAjBY,MAaV,eAOHhR,EAAM4Q,YAAYC,GAAG,MAAQ,CAC5BjQ,QAAS,SARP,GAWNqQ,WAAW,cACTC,YAAalR,EAAMW,QAAQ,IAC1BX,EAAM4Q,YAAYC,GAAG,MAAQ,CAC5BjQ,QAAS,SAIbuQ,QAAQ,6BACHnR,EAAMoR,OAAOD,SADX,mBAGJnR,EAAM4Q,YAAYC,GAAG,MAAQ,CAC5BjQ,QAAS,UAGbyQ,YAAa,CACXpQ,MAvCc,IAwCdd,gBAAiB,WAEnBmR,QAAS,CACPC,SAAU,EACVpR,gBAAiB,UACjB6J,QAAShK,EAAMW,QAAQ,SAKd,SAAS6Q,GAAiBlV,GACvC,IAAM+E,EAAUvB,KACVE,EAAQyR,eAFqC,EAGfzT,IAAM0T,UAAS,GAHA,oBAG5CC,EAH4C,KAGhCC,EAHgC,KAK7CC,EAAqB,WACzBD,GAAeD,IAGXhB,EACJ,yBACExO,MAAO,CACLvB,QAAS,OACTC,cAAe,SACfiR,eAAgB,gBAChB5R,OAAQ,YAGV,6BACE,wBAAIiC,MAAO,CAAEC,MAAO,QAAS4H,QAAS,aAAtC,qBACA,kBAACqG,GAAA,EAAD,MACA,kBAAC0B,GAAA,EAAD,KACE,kBAAC,IAAD,CAAMpI,GAAI,aAAcxH,MAAO,CAAEyH,eAAgB,SAC/C,kBAACoI,GAAA,EAAD,CAAUC,QAAM,EAAC9J,IAAK,aACpB,kBAAC,KAAD,CAAWhG,MAAO,CAAEC,MAAO,WAC3B,kBAAC8P,GAAA,EAAD,CAAczO,QAAS,YAAatB,MAAO,CAAEC,MAAO,aAIxD,kBAAC,IAAD,CAAMuH,GAAI,mBAAoBxH,MAAO,CAAEyH,eAAgB,SACrD,kBAACoI,GAAA,EAAD,CAAUC,QAAM,EAAC9J,IAAK,qBACpB,kBAAC,KAAD,CAAWhG,MAAO,CAAEC,MAAO,WAC3B,kBAAC8P,GAAA,EAAD,CAAczO,QAAS,oBAAqBtB,MAAO,CAAEC,MAAO,cAIlE,kBAACiO,GAAA,EAAD,OAEF,6BACE,kBAAC,GAAD,MACA,kBAACA,GAAA,EAAD,MACA,yBAAKlO,MAAO,CAAEvB,QAAS,OAAQkR,eAAgB,WAC7C,kBAAC,GAAD,SAMFvQ,EAAY4Q,SAAS5T,KAE3B,OACE,yBAAKV,UAAWwD,EAAQpB,MACtB,kBAACwB,EAAA,EAAD,MACA,kBAAC2Q,GAAA,EAAD,CAAQC,SAAS,QAAQxU,UAAWwD,EAAQ0P,QAC1C,kBAACuB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEnQ,MAAM,UACNoQ,aAAW,cACXC,KAAK,QACLxC,QAAS4B,EACThU,UAAWwD,EAAQ4P,YAEnB,kBAAC,KAAD,OAEF,kBAAChP,EAAA,EAAD,CAAYC,QAAQ,KAAKwQ,QAAM,GAA/B,uBAKJ,yBAAK7U,UAAWwD,EAAQsP,OAAQ6B,aAAW,mBAEzC,kBAACG,GAAA,EAAD,CAAQC,MAAI,EAACC,eAAe,OAC1B,kBAACC,GAAA,EAAD,CACEvR,UAAWA,EACXW,QAAQ,YACR6Q,OAA4B,QAApB/S,EAAM4H,UAAsB,QAAU,OAC9C4F,KAAMmE,EACNqB,QAASnB,EACTxQ,QAAS,CACPZ,MAAOY,EAAQgQ,aAEjB4B,WAAY,CACVC,aAAa,IAGf,kBAAC,IAAMC,SAAP,KAAiBxC,KAGrB,kBAACgC,GAAA,EAAD,CAAQS,QAAM,EAACP,eAAe,OAC5B,kBAACC,GAAA,EAAD,CACEzR,QAAS,CACPZ,MAAOY,EAAQgQ,aAEjBnP,QAAQ,YACRsL,MAAI,GAEHmD,KAIP,0BAAM9S,UAAWwD,EAAQiQ,SACvB,yBAAKzT,UAAWwD,EAAQ8P,UACvB7U,EAAM+W,W,WCpGAC,G,4MAxDNlX,kBAAoB,WAAa,IAAD,EACU,EAAKE,MAA9CC,EAD+B,EAC/BA,QAASC,EADsB,EACtBA,cAAeiD,EADO,EACPA,aAI1B5C,EAA0B,IAHXN,EAAbG,SACAC,SAEuCG,UAAU,GACnDQ,EAA0B,IAAIN,gBAAgBH,GAElD,GAAMS,EAAOL,IAAI,cAAe,CAC9B,IAAIsW,EAAkB,IAAIC,KAC1BD,EAAUE,WAAWF,EAAUG,aAAeC,OAAOrW,EAAOL,IAAI,gBAEhE2W,aAAY,WACN,IAAIJ,MAAUD,IAChBM,gBACArX,EAAciU,mBACdhR,EAAa,CACX+N,MAAM,EACNC,QAAS,4CACTqG,iBAAkB,KAClBC,aAAc,CAAEC,WAAY,SAAUC,SAAU,YAGnD,O,EAIA5W,OAAS,WAAoB,IAAD,EACgB,EAAKf,MAAhD4X,EAD2B,EAC3BA,cAAeC,EADY,EACZA,SAGrB,QAJiC,EACF3X,cACW4X,iBAYxC,uBAAKvW,UAAU,8BACb,gBAAC2T,GAAD,KACE,gBAAC6C,EAAA,EAAD,iBAAcF,EAAd,CAAwBnB,QAASkB,KACjC,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOI,OAAK,EAACC,KAAM,CAAC,IAAK,cAAe/S,UAAW2I,KACnD,gBAAC,IAAD,CAAOoK,KAAM,yBAA0B/S,UAAWoD,KAClD,gBAAC,IAAD,CAAO0P,OAAK,EAACC,KAAM,mBAAoB/S,UAAW+J,KAClD,gBAAC,IAAD,CAAOgJ,KAAK,IAAI/S,UAAWa,OAf/B,uBAAKxE,UAAU,8BACb,gBAACwW,EAAA,EAAD,iBAAcF,EAAd,CAAwBnB,QAASkB,KACjC,gBAACM,EAAD,Q,YApCQxW,iBCkBH2B,eAAWC,aAtBF,SAACC,GACvB,MAAO,CACLrD,cAAeqD,EAAMrD,cACrB6N,KAAMxK,EAAMwK,KACZ8J,SAAUtU,EAAMsU,aAIO,SACzBhW,GAMA,MAAO,CACL1B,UAAW,SAACyB,GAAD,OAAwBC,EAAS1B,EAAUyB,KACtDuB,aAAc,SAACnB,GAAD,OAAkCH,EAASsB,EAAanB,KACtE4V,cAAe,kBAAM/V,E7BfhB,CAAEK,KAAMO,EAAS0V,MAAOnW,UAAMsM,Q6BmBbhL,CAA6C0T,K,oEC3B1DoB,GAAsC,CACjDlH,MAAM,EACNC,QAAS,GACTqG,iBAAkB,IAClBC,aAAc,CAAEE,SAAU,SAAUD,WAAY,UCFnCW,8BAAgB,CAC7BnY,cCL2B,WAKR,IAJnBqD,EAIkB,uDAJK,IAAI+U,KAAc,CACvC3Y,WACAC,gBAGF,OAAO2D,GDAPwK,KEPyB,WAG0B,IAFnDxK,EAEkD,uDAFK,KACvDgV,EACkD,uCAClD,OAAQA,EAAOrW,MACb,KAAK1C,EAAK2C,aACR,OAAOoW,EAAOvW,KAEhB,QACE,OAAOuB,IFDXyK,UGN8B,WAGiC,IAF/DzK,EAE8D,uDAFK,KACnEgV,EAC8D,uCAC9D,OAAQA,EAAOrW,MACb,KAAK2K,GAAUkC,kBACb,OAAOyJ,KAAM,GAAIjV,EAAOgV,EAAOvW,MAEjC,KAAK6K,GAAUgH,MACb,OAAO,KAET,QACE,OAAOtQ,IHLXuF,SIP6B,WAGiB,IAF9CvF,EAE6C,uDAFK,KAClDgV,EAC6C,uCAC7C,OAAQA,EAAOrW,MACb,KAAK4C,EAASiI,iBACZ,OAAOyL,KAAM,GAAIjV,EAAOgV,EAAOvW,MAEjC,QACE,OAAOuB,IJDXmH,iBKRqC,WAGgB,IAFrDnH,EAEoD,uDAFK,KACzDgV,EACoD,uCACpD,OAAQA,EAAOrW,MACb,KAAKP,EAAkBa,0BACrB,OAAOgW,KAAM,GAAIjV,EAAOgV,EAAOvW,MAEjC,QACE,OAAOuB,ILAXwP,WMT+B,WAGA,IAF/BxP,EAE8B,uDAFK,KACnCgV,EAC8B,uCAC9B,OAAQA,EAAOrW,MACb,KAAKE,EAAYU,8BACf,OAAO0V,KAAM,GAAIjV,EAAO,CAAEyP,SAAUuF,EAAOvW,OAE7C,KAAKI,EAAYW,gCACf,OAAOyV,KAAM,GAAIjV,EAAO,CAAE0P,WAAYsF,EAAOvW,OAE/C,KAAKI,EAAYa,+BACf,OAAOuV,KAAM,GAAIjV,EAAO,CAAE2P,UAAWqF,EAAOvW,OAE9C,QACE,OAAOuB,INLXsU,SDF6B,WAGV,IAFnBtU,EAEkB,uDAFK6U,GACvBG,EACkB,uCAClB,OAAQA,EAAOrW,MACb,KAAKO,EAASW,KACZ,OAAOoV,KAAM,GAAIjV,EAAOgV,EAAOvW,MAEjC,KAAKS,EAAS0V,MACZ,OAAOK,KAAM,GAAIjV,EAAL,aAAC,gBAAgBA,GAAjB,IAAwB2N,MAAM,KAE5C,QACE,OAAO3N,MQdPkV,GAA2B,CAC/BvY,cAAe,IAAIoY,KAAc,CAC/B3Y,SAAUA,EACVC,YAAaA,IAEfmO,KAAM,KACNjF,SAAU,KACVkF,UAAW,KACXtD,iBAAkB,KAClBqI,WAAY,KACZ8E,SAAUO,IAWGM,GARQ,WAAmE,IAAlEC,EAAiE,uDAApCF,GACnD,OAAOG,uBACLC,GACAF,EACuFG,2BAAgBC,QCnB3GlD,SAASmD,iBAAiB,oBAAoB,WAC5C,IAAMrV,EAAoBkS,SAASoD,eAAe,QAC5CC,EAAeR,KAErBS,IAASpY,OACP,kBAAC,IAAD,CAAUmY,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,GAAD,QAGJvV,Q","file":"static/js/main.52c313c3.chunk.js","sourcesContent":["import { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport { IRootState, IAction, Response } from 'common/interfaces';\n\nexport enum USER {\n  RECEIVE_USER = 'user/RECEIVE_USER',\n}\n\nexport const receiveUser = (\n  data: SpotifyApi.CurrentUsersProfileResponse\n): IAction<SpotifyApi.CurrentUsersProfileResponse> => {\n  return { type: USER.RECEIVE_USER, data };\n};\n\nexport const fetchUser = (\n  api: SpotifyWebApi\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<SpotifyApi.CurrentUsersProfileResponse>> => {\n  return (dispatch: Dispatch<IAction<SpotifyApi.CurrentUsersProfileResponse>>): Promise<void> => {\n    return api.getMe().then((response: Response<SpotifyApi.CurrentUsersProfileResponse>) => {\n      dispatch(receiveUser(response.body));\n    });\n  };\n};\n","/*\n  Safe to expost these auth credentials due to the grant flow I am following:\n  \n  \"\"\"\n  Implicit grant flow is for clients that are implemented entirely using JavaScript and running in the resource owner’s\n  browser. You do not need any server-side code to use it. Rate limits for requests are improved but there is no\n  refresh token provided. \n  \"\"\"\n\n  https://developer.spotify.com/documentation/general/guides/authorization-guide/\n*/\n\nexport const authEndpoint: string = 'https://accounts.spotify.com/authorize?';\n\nexport const scopes: string[] = [\n  'playlist-read-collaborative',\n  'playlist-modify-public',\n  'user-top-read',\n  'playlist-read-private',\n  'playlist-modify-private',\n  'user-follow-read',\n  'user-read-recently-played',\n  'user-library-read',\n];\n\nexport const responseType: string = 'token';\n\nexport const clientId: string =\n  process.env.NODE_ENV === 'development' ? 'a91af95c5d8c4e178920646664034328' : 'a5c714fac13f4b5c924497c3b9e533a2';\n\nexport const redirectUri: string =\n  process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : 'https://gaganza.github.io/apollos-playlist/';\n","import * as React from 'react';\n\nimport { redirectUri, clientId, scopes, authEndpoint, responseType } from 'authorization';\nimport { TSignInProps } from './interfaces';\n\nimport './style.scss';\n\nclass SignIn extends React.PureComponent<TSignInProps> {\n  public componentDidMount = async (): Promise<void> => {\n    let { history, spotifyWebApi, fetchUser } = this.props;\n    let { location } = history;\n    let { pathname } = location;\n\n    // if the string 'access_token' exists in the URL then that means we were just redirected from the Spotfiy auth\n    // endpoint and now have all of the info we need to safely use the Spotify API client\n    if (pathname.indexOf('access_token') !== -1) {\n      // due to the HashRouter all the links will look like /#/ - meaning in this case pathname will be prefixed with\n      // a '/' which we have to strip out & replace with a '?' in order to easily use a URLSearchParam object for\n      // parsing. Sadly, messing with the redirect uri did not help fix this issue.\n\n      let treatedPathname: string = '?' + pathname.substring(1);\n\n      spotifyWebApi.setAccessToken(new URLSearchParams(treatedPathname).get('access_token')!);\n\n      await fetchUser(spotifyWebApi).then((_: void) => {\n        history.push('/playlists');\n      });\n    }\n  };\n\n  public render = (): JSX.Element => {\n    let params: URLSearchParams = new URLSearchParams({\n      client_id: encodeURI(clientId),\n      redirect_uri: encodeURI(redirectUri),\n      scope: scopes.join('%20'),\n      response_type: encodeURI(responseType),\n    });\n\n    return (\n      <a className=\"sign-in-button\" href={authEndpoint + params.toString()}>\n        Login to Spotify\n      </a>\n    );\n  };\n}\n\nexport default SignIn;\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { IAction, Response, IRootState } from 'common/interfaces';\n\nexport enum TRACKS_ATTRIBUTES {\n  RECEIVE_TRACKS_ATTRIBUTES = 'trackAttributes/RECEIVE_TRACKS_ATTRIBUTES',\n}\n\nexport const receiveTrackAttributes = (\n  data: SpotifyApi.MultipleAudioFeaturesResponse\n): IAction<SpotifyApi.MultipleAudioFeaturesResponse> => {\n  return { type: TRACKS_ATTRIBUTES.RECEIVE_TRACKS_ATTRIBUTES, data };\n};\n\nexport const fetchTracksAttributes = (\n  api: SpotifyWebApi,\n  trackIds: string[]\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<SpotifyApi.MultipleAudioFeaturesResponse>> => {\n  return (dispatch: Dispatch<IAction<SpotifyApi.MultipleAudioFeaturesResponse>>): Promise<void> => {\n    return api\n      .getAudioFeaturesForTracks(trackIds)\n      .then((response: Response<SpotifyApi.MultipleAudioFeaturesResponse>) => {\n        dispatch(receiveTrackAttributes(response.body));\n      });\n  };\n};\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\nimport { IAction, IRootState, Response } from 'common/interfaces';\n\nexport enum TOP_ARTISTS {\n  RECEIVE_TOP_ARTISTS_LONG_TERM = 'topArtsits/RECEIVE_TOP_ARTISTS_LONG_TERM',\n  RECEIVE_TOP_ARTISTS_MEDIUM_TERM = 'topArtsits/RECEIVE_TOP_ARTISTS_MEDIUM_TERM',\n  RECEIVE_TOP_ARTISTS_SHORT_TERM = 'topArtsits/RECEIVE_TOP_ARTISTS_SHORT_TERM',\n}\n\nexport const receiveTopArtistsLongTerm = (\n  data: SpotifyApi.UsersTopArtistsResponse\n): IAction<SpotifyApi.UsersTopArtistsResponse> => {\n  return { type: TOP_ARTISTS.RECEIVE_TOP_ARTISTS_LONG_TERM, data };\n};\n\nexport const receiveTopArtistsMediumTerm = (\n  data: SpotifyApi.UsersTopArtistsResponse\n): IAction<SpotifyApi.UsersTopArtistsResponse> => {\n  return { type: TOP_ARTISTS.RECEIVE_TOP_ARTISTS_MEDIUM_TERM, data };\n};\n\nexport const receiveTopArtistsShortTerm = (\n  data: SpotifyApi.UsersTopArtistsResponse\n): IAction<SpotifyApi.UsersTopArtistsResponse> => {\n  return { type: TOP_ARTISTS.RECEIVE_TOP_ARTISTS_SHORT_TERM, data };\n};\n\nexport const fetchTopArtists = (\n  api: SpotifyWebApi,\n  timeRange: 'long_term' | 'medium_term' | 'short_term'\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<SpotifyApi.UsersTopArtistsResponse>> => {\n  return (dispatch: Dispatch<IAction<SpotifyApi.UsersTopArtistsResponse>>): Promise<void> => {\n    return api\n      .getMyTopArtists({ time_range: timeRange })\n      .then((response: Response<SpotifyApi.UsersTopArtistsResponse>) => {\n        if (timeRange === 'long_term') {\n          dispatch(receiveTopArtistsLongTerm(response.body));\n        } else if (timeRange === 'medium_term') {\n          dispatch(receiveTopArtistsMediumTerm(response.body));\n        } else {\n          dispatch(receiveTopArtistsShortTerm(response.body));\n        }\n      });\n  };\n};\n","import { SnackbarProps } from '@material-ui/core';\n\nimport { IAction } from 'common/interfaces';\n\nexport enum SNACKBAR {\n  OPEN = 'snackbar/OPEN',\n  CLOSE = 'snackbar/CLOSE',\n}\n\nexport const openSnackbar = (data: Partial<SnackbarProps>): IAction<Partial<SnackbarProps>> => {\n  return { type: SNACKBAR.OPEN, data };\n};\n\nexport const closeSnackbar = (): IAction<unknown> => {\n  return { type: SNACKBAR.CLOSE, data: undefined };\n};\n","import { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { withRouter } from 'react-router-dom';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport SignIn from './SignIn';\nimport { fetchUser } from 'common/actions';\nimport { IAction, IRootState } from 'common/interfaces';\nimport { IStateProps, IDispatchProps } from './interfaces';\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<IRootState, null, IAction<SpotifyApi.CurrentUsersProfileResponse>>\n): IDispatchProps => {\n  return {\n    fetchUser: (api: SpotifyWebApi) => dispatch(fetchUser(api)),\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SignIn));\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SignIn from 'components/SignIn';\n\nimport './styles.scss';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n    backgroundColor: '#1D1E28',\n  },\n  image: {\n    backgroundImage:\n      'url(https://images.unsplash.com/photo-1507808973436-a4ed7b5e87c9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2000&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor: '#1D1E28',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    backgroundColor: '#1D1E28',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: '#1D1E28',\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignInSide() {\n  const classes = useStyles();\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square className={'apollos-playlist__home-page'}>\n        <div className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h5\" style={{ color: 'white ' }}>\n            Apollo's Playlist\n          </Typography>\n          <SignIn />\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n","import { withRouter } from 'react-router-dom';\n\nimport HomePage from './HomePage';\n\nexport default withRouter(HomePage);\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { IAction, Response, IRootState } from 'common/interfaces';\n\nexport enum PLAYLIST {\n  RECEIVE_PLAYLIST = 'playlist/RECEIVE_PLAYLIST',\n}\n\nexport const receivePlaylist = (\n  data: SpotifyApi.SinglePlaylistResponse\n): IAction<SpotifyApi.SinglePlaylistResponse> => {\n  return { type: PLAYLIST.RECEIVE_PLAYLIST, data };\n};\n\nexport const fetchPlaylist = (\n  api: SpotifyWebApi,\n  playlistId: string\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<SpotifyApi.SinglePlaylistResponse>> => {\n  return (dispatch: Dispatch<IAction<SpotifyApi.SinglePlaylistResponse>>): Promise<void> => {\n    return api.getPlaylist(playlistId).then((response: Response<SpotifyApi.SinglePlaylistResponse>) => {\n      dispatch(receivePlaylist(response.body));\n    });\n  };\n};\n","import * as React from 'react';\n\nimport { TNotFoundProps } from './interfaces';\n\nclass NotFound extends React.PureComponent<TNotFoundProps> {\n  public render = (): JSX.Element => {\n    return <div>Not Found</div>;\n  };\n}\n\nexport default NotFound;\n","import { withRouter } from 'react-router-dom';\n\nimport NotFound from './NotFound';\n\nexport default withRouter(NotFound);\n","export const capitalizeFirstLetter = (str: string): string => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const buttonTheme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      containedPrimary: {\n        textTransform: 'none',\n        backgroundColor: '#1D1E28',\n        '&:hover': {\n          backgroundColor: 'grey',\n        },\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const sliderTheme = createMuiTheme({\n  overrides: {\n    MuiSlider: {\n      thumbColorPrimary: {\n        backgroundColor: '#1D1E28',\n      },\n      track: {\n        backgroundColor: '#1D1E28',\n      },\n      rail: {\n        backgroundColor: 'gray',\n      },\n      valueLabel: {\n        color: '#1D1E28',\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const inputTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#1D1E28',\n      dark: '#1D1E28',\n    },\n  },\n  overrides: {\n    MuiInput: {\n      root: {\n        width: '100%',\n      },\n    },\n\n    MuiFormControl: {\n      root: {\n        width: '100%',\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const chipTheme = createMuiTheme({\n  overrides: {\n    MuiChip: {\n      root: {\n        margin: '8px',\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const tableTheme = createMuiTheme({\n  overrides: {\n    MuiTableCell: {\n      root: {\n        paddingLeft: '0px',\n        paddingRight: '8px',\n        paddingTop: '4px',\n        paddingBottom: '4px',\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const linearProgresTheme = createMuiTheme({\n  overrides: {\n    MuiLinearProgress: {\n      root: {\n        height: 10,\n        borderRadius: 5,\n      },\n      colorPrimary: {\n        backgroundColor: 'grey',\n      },\n      barColorPrimary: {\n        backgroundColor: '#1D1E28',\n      },\n      bar: {\n        borderRadius: 5,\n      },\n    },\n  },\n});\n","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { Table, TableContainer, TableRow, TableCell, TableBody, Typography, LinearProgress } from '@material-ui/core';\nimport PersonIcon from '@material-ui/icons/Person';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport { capitalizeFirstLetter, millisecondsToViewableFormat } from 'common/helpers';\nimport { playlistToTrackIds, normalizeTrackAudioFeature } from './helpers';\nimport { IAudioFeatures } from 'common/interfaces';\nimport { TPlaylistProps, IPlaylistState } from './interfaces';\n\nimport { tableTheme, linearProgresTheme } from 'common/themes';\n\nclass Playlist extends React.Component<TPlaylistProps, IPlaylistState> {\n  public constructor(props: TPlaylistProps) {\n    super(props);\n\n    this.state = { loading: true };\n  }\n\n  public componentDidMount = (): void => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n    let { location, spotifyWebApi, fetchPlaylist, fetchTracksAttributes } = this.props;\n\n    let playlistId: string = location.pathname.substring(location.pathname.lastIndexOf('/') + 1);\n\n    if (playlistId !== this.props.playlist?.id) {\n      fetchPlaylist(spotifyWebApi, playlistId).then(() => {\n        let { playlist } = this.props;\n\n        if (!playlist) return;\n        fetchTracksAttributes(spotifyWebApi, playlistToTrackIds(playlist));\n      });\n    }\n\n    this.setState({ loading: false });\n  };\n\n  public renderPlaylistArtwork = (playlist: SpotifyApi.SinglePlaylistResponse): JSX.Element | null => {\n    if (!playlist || !playlist.images || playlist.images.length === 0) return null;\n\n    return (\n      <img\n        src={playlist.images[0].url}\n        style={{ maxWidth: '300px', maxHeight: '300px ' }}\n        alt={`${playlist.name} playlist artwork`}\n      />\n    );\n  };\n\n  public renderPlaylistName = (playlist: SpotifyApi.SinglePlaylistResponse): JSX.Element | null => {\n    if (!playlist) return null;\n\n    return <Typography>{playlist.name}</Typography>;\n  };\n\n  public renderPlaylistOwner = (playlist: SpotifyApi.SinglePlaylistResponse): JSX.Element | null => {\n    if (!playlist) return null;\n\n    return (\n      <div style={{ display: 'flex', alignItems: 'row' }}>\n        <PersonIcon />\n        <Typography>{playlist.owner.display_name}</Typography>\n      </div>\n    );\n  };\n\n  public renderAttributeBar = (normalizedData: IAudioFeatures, attribute: keyof IAudioFeatures): JSX.Element => {\n    return (\n      <div>\n        <Typography>{capitalizeFirstLetter(attribute)}</Typography>\n        <ThemeProvider theme={linearProgresTheme}>\n          <LinearProgress variant=\"determinate\" value={normalizedData[attribute]} />\n        </ThemeProvider>\n      </div>\n    );\n  };\n\n  public renderPlaylistAnalysis = (tracksAttributes: SpotifyApi.MultipleAudioFeaturesResponse): JSX.Element | null => {\n    if (!tracksAttributes) return null;\n\n    let normalizedData: IAudioFeatures = normalizeTrackAudioFeature(tracksAttributes);\n\n    return (\n      <Grid container spacing={1} direction={'column'}>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'acousticness')}</Grid>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'danceability')}</Grid>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'energy')}</Grid>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'instrumentalness')}</Grid>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'valence')}</Grid>\n      </Grid>\n    );\n  };\n\n  public renderTracks = (playlist: SpotifyApi.SinglePlaylistResponse): JSX.Element | null => {\n    if (!playlist) return null;\n\n    return (\n      <ThemeProvider theme={tableTheme}>\n        <TableContainer>\n          <Table>\n            <TableBody>\n              {playlist.tracks.items.map((track: SpotifyApi.PlaylistTrackObject) => (\n                <TableRow hover key={`table-row-${track.track.id}`}>\n                  <TableCell style={{ width: '50px' }}>\n                    <img\n                      style={{ maxHeight: '50px', maxWidth: '50px' }}\n                      src={\n                        track.track.album.images && track.track.album.images[0] && track.track.album.images[0].url\n                          ? track.track.album.images[0].url\n                          : ''\n                      }\n                      alt={'Album artwork for the song'}\n                    />\n                  </TableCell>\n                  <TableCell style={{ display: 'felx', flexDirection: 'column' }}>\n                    <div>{track.track.name}</div>\n                    <div>\n                      {track.track.artists[0].name} - {track.track.album.name}\n                    </div>\n                  </TableCell>\n                  <TableCell>{millisecondsToViewableFormat(track.track.duration_ms)}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ThemeProvider>\n    );\n  };\n\n  public render = (): JSX.Element | null => {\n    let { location, playlist, tracksAttributes } = this.props;\n    let { loading } = this.state;\n\n    let playlistId: string = location.pathname.substring(location.pathname.lastIndexOf('/') + 1);\n\n    if (!playlist || playlist.id !== playlistId) return null;\n    if (!tracksAttributes) return null;\n\n    return (\n      <Grid container spacing={3}>\n        {loading && (\n          <Grid item xs={12}>\n            <ThemeProvider theme={linearProgresTheme}>\n              <LinearProgress />\n            </ThemeProvider>\n          </Grid>\n        )}\n\n        <Grid item xs={12} md={6}>\n          {this.renderPlaylistArtwork(playlist)}\n        </Grid>\n        <Grid item xs={12} md={6}>\n          {this.renderPlaylistName(playlist)}\n          <br />\n          {this.renderPlaylistOwner(playlist)}\n          <br />\n          {this.renderPlaylistAnalysis(tracksAttributes)}\n        </Grid>\n        <Grid item xs={12}>\n          {this.renderTracks(playlist)}\n        </Grid>\n      </Grid>\n    );\n  };\n}\n\nexport default Playlist;\n","import { IAudioFeatures } from 'common/interfaces';\n\nexport const playlistToTrackIds = (playlist: SpotifyApi.SinglePlaylistResponse): string[] => {\n  return playlist.tracks.items.map((item: SpotifyApi.PlaylistTrackObject) => {\n    return item.track.id;\n  });\n};\n\nexport const normalizeTrackAudioFeature = (\n  tracksAttributes: SpotifyApi.MultipleAudioFeaturesResponse\n): IAudioFeatures => {\n  let normalized: IAudioFeatures = {\n    acousticness: 0.0,\n    danceability: 0.0,\n    energy: 0.0,\n    instrumentalness: 0.0,\n    valence: 0.0,\n  };\n\n  let count: number = tracksAttributes.audio_features.length;\n\n  tracksAttributes.audio_features.forEach((feature: SpotifyApi.AudioFeaturesObject) => {\n    normalized.acousticness += feature.acousticness;\n    normalized.danceability += feature.danceability;\n    normalized.energy += feature.energy;\n    normalized.instrumentalness += feature.instrumentalness;\n    normalized.valence += feature.valence;\n  });\n\n  normalized.acousticness = (normalized.acousticness / count) * 100;\n  normalized.danceability = (normalized.danceability / count) * 100;\n  normalized.energy = (normalized.energy / count) * 100;\n  normalized.instrumentalness = (normalized.instrumentalness / count) * 100;\n  normalized.valence = (normalized.valence / count) * 100;\n\n  return normalized;\n};\n","export const millisecondsToViewableFormat = (input: number): string => {\n  let totalHours,\n    totalMinutes,\n    totalSeconds,\n    hours,\n    minutes,\n    seconds,\n    result = '';\n\n  totalSeconds = input / 1000;\n  totalMinutes = totalSeconds / 60;\n  totalHours = totalMinutes / 60;\n\n  seconds = Math.floor(totalSeconds) % 60;\n  minutes = Math.floor(totalMinutes) % 60;\n  hours = Math.floor(totalHours) % 60;\n\n  if (hours !== 0) {\n    result += hours + ':';\n\n    if (minutes.toString().length === 1) {\n      minutes = '0' + minutes;\n    }\n  }\n\n  result += minutes + ':';\n\n  if (seconds.toString().length === 1) {\n    seconds = '0' + seconds;\n  }\n\n  result += seconds;\n\n  return result;\n};\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { PLAYLIST_RESULTS_PER_PAGE } from 'common/constants';\nimport { IAction, Response, IPagingObject, IRootState, IPaginationOptions } from 'common/interfaces';\n\nexport enum PLAYLISTS {\n  RECEIVE_PLAYLISTS = 'playlists/RECEIVE_PLAYLISTS',\n  CLEAR = 'playlist/CLEAR',\n}\n\nexport const receivePlaylist = (\n  data: IPagingObject<SpotifyApi.PlaylistObjectSimplified>\n): IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>> => {\n  return { type: PLAYLISTS.RECEIVE_PLAYLISTS, data };\n};\n\nexport const clearPlaylist = (): IAction<unknown> => {\n  return { type: PLAYLISTS.CLEAR, data: undefined };\n};\n\nexport const fetchPlaylists = (\n  api: SpotifyWebApi,\n  userId: string,\n  options: IPaginationOptions\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>>> => {\n  return (dispatch: Dispatch<IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>>>): Promise<void> => {\n    return api.getUserPlaylists(userId, options).then((response: Response<SpotifyApi.ListOfUsersPlaylistsResponse>) => {\n      let data: IPagingObject<SpotifyApi.PlaylistObjectSimplified> = {\n        total: response.body.total,\n        items: {\n          [options.offset / PLAYLIST_RESULTS_PER_PAGE + 1]: response.body.items,\n        },\n      };\n\n      dispatch(receivePlaylist(data));\n    });\n  };\n};\n","import { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { withRouter } from 'react-router-dom';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport Playlist from './Playlist';\nimport { fetchTracksAttributes } from 'common/actions';\nimport { fetchPlaylist } from './actions';\nimport { IAction, IRootState } from 'common/interfaces';\nimport { IStateProps, IDispatchProps } from './interfaces';\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<\n    IRootState,\n    null,\n    IAction<SpotifyApi.SinglePlaylistResponse> | IAction<SpotifyApi.MultipleAudioFeaturesResponse>\n  >\n): IDispatchProps => {\n  return {\n    fetchPlaylist: (api: SpotifyWebApi, playlistId: string) => dispatch(fetchPlaylist(api, playlistId)),\n    fetchTracksAttributes: (api: SpotifyWebApi, tracksId: string[]) => dispatch(fetchTracksAttributes(api, tracksId)),\n  };\n};\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n    playlist: state.playlist,\n    tracksAttributes: state.tracksAttributes,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Playlist));\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  CardMedia,\n  Card,\n  CardActionArea,\n  CardContent,\n  Typography,\n  createMuiTheme,\n  ThemeProvider,\n} from '@material-ui/core';\n\nconst cardTheme = createMuiTheme({\n  overrides: {\n    MuiCard: {\n      root: {\n        boxShadow: 'none',\n        '&:hover': {\n          boxShadow:\n            '0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)',\n        },\n      },\n    },\n  },\n});\n\nclass PlaylistCard extends React.PureComponent<SpotifyApi.PlaylistObjectSimplified> {\n  public render = (): JSX.Element => {\n    let { name, images, id } = this.props;\n\n    return (\n      <Link to={`/playlists/${id}`} style={{ textDecoration: 'none' }}>\n        <ThemeProvider theme={cardTheme}>\n          <Card>\n            <CardActionArea>\n              {images[0] && (\n                <CardMedia\n                  style={{ padding: '16px' }}\n                  component=\"img\"\n                  alt={`${name} playlist artwork`}\n                  image={images[0].url}\n                  title={name}\n                />\n              )}\n              <CardContent>\n                <Typography>{name}</Typography>\n              </CardContent>\n            </CardActionArea>\n          </Card>\n        </ThemeProvider>\n      </Link>\n    );\n  };\n}\n\nexport { PlaylistCard };\n","import * as React from 'react';\nimport { LinearProgress, ThemeProvider, Grid } from '@material-ui/core';\nimport Pagination from '@material-ui/lab/Pagination';\n\nimport { PlaylistCard } from './subcomponents';\nimport { PLAYLIST_RESULTS_PER_PAGE } from 'common/constants';\nimport { TPlaylistsProps, IPlaylistsState } from './interfaces';\n\nimport { linearProgresTheme } from 'common/themes';\n\nclass Playlists extends React.Component<TPlaylistsProps, IPlaylistsState> {\n  public constructor(props: TPlaylistsProps) {\n    super(props);\n\n    this.state = {\n      page: 1,\n      loading: true,\n    };\n  }\n\n  public componentDidMount = async (): Promise<void> => {\n    let { location, spotifyWebApi, fetchPlaylists, user, playlists } = this.props;\n\n    // no URL params\n    if (location.search === '') {\n      if (playlists === null) {\n        await fetchPlaylists(spotifyWebApi, user!.id, {\n          limit: PLAYLIST_RESULTS_PER_PAGE,\n          offset: 0,\n        });\n      }\n    }\n\n    this.setState({ loading: false });\n  };\n\n  public handlePaginationChange = (_: React.ChangeEvent<unknown>, page: number): void => {\n    let { fetchPlaylists, spotifyWebApi, user, playlists } = this.props;\n    if (playlists!.items[page] === undefined) {\n      fetchPlaylists(spotifyWebApi, user!.id, {\n        limit: PLAYLIST_RESULTS_PER_PAGE,\n        offset: (page - 1) * PLAYLIST_RESULTS_PER_PAGE,\n      });\n    }\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n    this.setState({ page });\n  };\n\n  public render = (): JSX.Element => {\n    let { playlists } = this.props;\n    let { page, loading } = this.state;\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Grid container spacing={3}>\n          {loading && (\n            <Grid item xs={12}>\n              <ThemeProvider theme={linearProgresTheme}>\n                <LinearProgress />\n              </ThemeProvider>\n            </Grid>\n          )}\n\n          {playlists &&\n            playlists.items[page] &&\n            playlists.items[page].map((playlist: SpotifyApi.PlaylistObjectSimplified) => {\n              return (\n                <Grid item xs={12} md={6} lg={4} xl={3} key={`playlist-card-${playlist.id}`}>\n                  <PlaylistCard {...playlist} />\n                </Grid>\n              );\n            })}\n        </Grid>\n        {playlists && playlists.items && (\n          <Pagination\n            count={Math.floor(playlists.total / PLAYLIST_RESULTS_PER_PAGE)}\n            page={page}\n            onChange={this.handlePaginationChange}\n            style={{ paddingTop: '16px' }}\n          />\n        )}\n      </div>\n    );\n  };\n}\n\nexport default Playlists;\n","export const PLAYLIST_RESULTS_PER_PAGE: number = 8;\n","import { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { withRouter } from 'react-router-dom';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport Playlists from './Playlists';\nimport { fetchPlaylists } from './actions';\nimport { IPaginationOptions, IAction, IPagingObject, IRootState } from 'common/interfaces';\nimport { IStateProps, IDispatchProps } from './interfaces';\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<IRootState, null, IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>>>\n): IDispatchProps => {\n  return {\n    fetchPlaylists: (api: SpotifyWebApi, userId: string, options: IPaginationOptions) =>\n      dispatch(fetchPlaylists(api, userId, options)),\n  };\n};\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n    user: state.user,\n    playlists: state.playlists,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Playlists));\n","import * as React from 'react';\nimport {\n  Typography,\n  Grid,\n  ThemeProvider,\n  Button,\n  Select,\n  Chip,\n  Slider,\n  Input,\n  MenuItem,\n  Avatar,\n  FormHelperText,\n  FormControl,\n  TextField,\n} from '@material-ui/core';\n\nimport { capitalizeFirstLetter } from 'common/helpers';\nimport { Response, IAudioFeatures } from 'common/interfaces';\nimport { TCreatePlaylistProps, ICreatePlaylistState } from './interfaces';\n\nimport { buttonTheme, sliderTheme, inputTheme, chipTheme } from 'common/themes';\n\nclass CreatePlaylist extends React.Component<TCreatePlaylistProps, ICreatePlaylistState> {\n  public constructor(props: TCreatePlaylistProps) {\n    super(props);\n\n    this.state = {\n      query: {\n        acousticness: {\n          min: 0.0,\n          max: 1.0,\n        },\n        danceability: {\n          min: 0.0,\n          max: 1.0,\n        },\n        energy: {\n          min: 0.0,\n          max: 1.0,\n        },\n        instrumentalness: {\n          min: 0.0,\n          max: 1.0,\n        },\n        valence: {\n          min: 0.0,\n          max: 1.0,\n        },\n      },\n      selectedArtistsIds: [],\n      playlistName: '',\n    };\n  }\n\n  public componentDidMount = (): void => {\n    let { fetchTopArtists, spotifyWebApi } = this.props;\n\n    fetchTopArtists(spotifyWebApi, 'short_term');\n    fetchTopArtists(spotifyWebApi, 'medium_term');\n    fetchTopArtists(spotifyWebApi, 'long_term');\n  };\n\n  public valueLabelFormat = (value: number, _: number): string => {\n    return Math.round(value * 100).toString();\n  };\n\n  public handleSliderChange = (attr: keyof IAudioFeatures) => {\n    return (_: React.ChangeEvent<unknown>, newValue: number[]) => {\n      let state: ICreatePlaylistState = this.state;\n      state.query[attr] = { min: newValue[0], max: newValue[1] };\n\n      this.setState(state);\n    };\n  };\n\n  public handlePlaylistNameChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    this.setState({\n      playlistName: event.target.value,\n    });\n  };\n\n  public handleArtistSelect = (event: React.ChangeEvent<{ value: unknown }>) => {\n    // have to force cast this since string[] isn't inherently supported as a React.ChangeEvent value\n    this.setState({\n      selectedArtistsIds: (event.target.value as unknown) as string[],\n    });\n  };\n\n  public handleCreatePlaylistClick = (_: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    let {\n      query: { acousticness, danceability, energy, instrumentalness, valence },\n    } = this.state;\n    this.props.spotifyWebApi\n      .getRecommendations({\n        min_acousticness: acousticness.min,\n        max_acousticness: acousticness.max,\n        min_danceability: danceability.min,\n        max_danceability: danceability.max,\n        min_energy: energy.min,\n        max_energy: energy.max,\n        min_instrumentalness: instrumentalness.min,\n        max_instrumentalness: instrumentalness.max,\n        min_valence: valence.min,\n        max_valence: valence.max,\n        seed_artists: this.state.selectedArtistsIds,\n        limit: 50,\n      })\n      .then((response: Response<SpotifyApi.RecommendationsFromSeedsResponse>) => {\n        if (response.body.tracks.length > 0) {\n          this.props.spotifyWebApi\n            .createPlaylist(this.props.user.id, this.state.playlistName)\n            .then((playlist: Response<SpotifyApi.CreatePlaylistResponse>) => {\n              let tracks: ReadonlyArray<string> = response.body.tracks.map(\n                (track: SpotifyApi.TrackObjectSimplified) => track.uri\n              );\n\n              this.props.spotifyWebApi.addTracksToPlaylist(playlist.body.id, tracks).then(() => {\n                this.props.clearPlaylist();\n                this.props.history.push(`/playlists/${playlist.body.id}`);\n              });\n            });\n        } else {\n          this.props.openSnackBar({\n            open: true,\n            message: 'Oops! Looks like you need to broaden your selection',\n          });\n        }\n      });\n  };\n\n  public alphabetizeArtists = (artists: SpotifyApi.ArtistObjectFull[]): SpotifyApi.ArtistObjectFull[] => {\n    return artists.sort((a: SpotifyApi.ArtistObjectFull, b: SpotifyApi.ArtistObjectFull) =>\n      a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n    );\n  };\n\n  public renderPlaylistNameInput = (): JSX.Element => {\n    return (\n      <>\n        <Typography>Playlist name</Typography>\n        <TextField value={this.state.playlistName} onChange={this.handlePlaylistNameChange} />\n      </>\n    );\n  };\n\n  public renderAttributeSlider = (attribute: keyof IAudioFeatures): JSX.Element => {\n    return (\n      <>\n        <Typography>{capitalizeFirstLetter(attribute as string)}</Typography>\n        <ThemeProvider theme={sliderTheme}>\n          <Slider\n            valueLabelDisplay={'auto'}\n            valueLabelFormat={this.valueLabelFormat}\n            min={0}\n            max={1}\n            step={0.01}\n            value={[this.state.query[attribute].min, this.state.query[attribute].max]}\n            onChange={\n              (this.handleSliderChange(attribute) as unknown) as (\n                event: React.ChangeEvent<unknown>,\n                value: number | number[]\n              ) => void\n            }\n          />\n        </ThemeProvider>\n      </>\n    );\n  };\n\n  public renderChip = (artists: SpotifyApi.ArtistObjectFull[], value: string): JSX.Element => {\n    return (\n      <ThemeProvider theme={chipTheme} key={value}>\n        <Chip\n          label={artists.find((a) => a.id === value)?.name}\n          avatar={<Avatar src={artists.find((a) => a.id === value)?.images[0].url} />}\n        />\n      </ThemeProvider>\n    );\n  };\n\n  public renderArtistSelect = (artists: SpotifyApi.ArtistObjectFull[]): JSX.Element => {\n    let { selectedArtistsIds } = this.state;\n\n    return (\n      <>\n        <Typography>Seed artists</Typography>\n        <ThemeProvider theme={inputTheme}>\n          <FormControl error>\n            <Select\n              error={selectedArtistsIds.length > 3}\n              multiple\n              value={selectedArtistsIds}\n              onChange={this.handleArtistSelect}\n              input={<Input multiline />}\n              renderValue={(selected) => (\n                <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                  {(selected as string[]).map((value: string) => this.renderChip(artists, value))}\n                </div>\n              )}\n            >\n              {this.alphabetizeArtists(artists).map(\n                (artist: SpotifyApi.ArtistObjectFull): JSX.Element => (\n                  <MenuItem key={artist.name} value={artist.id}>\n                    {artist.name}\n                  </MenuItem>\n                )\n              )}\n            </Select>\n            {selectedArtistsIds.length > 3 && <FormHelperText>Please select 1 - 3 artists</FormHelperText>}\n          </FormControl>\n        </ThemeProvider>\n      </>\n    );\n  };\n\n  public render = (): JSX.Element => {\n    let { selectedArtistsIds, playlistName } = this.state;\n\n    let attributes: (keyof IAudioFeatures)[] = [\n      'acousticness',\n      'danceability',\n      'energy',\n      'instrumentalness',\n      'valence',\n    ];\n\n    let artists: SpotifyApi.ArtistObjectFull[] = [];\n\n    let { topArtists } = this.props;\n\n    if (topArtists && topArtists.longTerm && topArtists.mediumTerm && topArtists.shortTerm) {\n      let { longTerm, mediumTerm, shortTerm } = topArtists;\n\n      artists = artists.concat(longTerm.items.concat(mediumTerm.items.concat(shortTerm.items)));\n\n      artists = artists.filter((e, i) => artists.findIndex((a) => a.id === e.id) === i);\n    }\n\n    return (\n      <Grid container spacing={3} alignItems={'center'}>\n        <Grid item xs={12}>\n          <Typography variant={'h6'}>Create a playlist</Typography>\n        </Grid>\n\n        <Grid item xs={12}>\n          {this.renderPlaylistNameInput()}\n        </Grid>\n\n        <Grid item xs={12}>\n          {this.renderArtistSelect(artists)}\n        </Grid>\n\n        {attributes.map(\n          (attribute: keyof IAudioFeatures): JSX.Element => {\n            return (\n              <Grid item xs={12} key={`slider-${attribute}`}>\n                {this.renderAttributeSlider(attribute)}\n              </Grid>\n            );\n          }\n        )}\n\n        <Grid container direction={'row'} justify={'center'}>\n          <Grid item>\n            <ThemeProvider theme={buttonTheme}>\n              <Button\n                variant={'contained'}\n                color={'primary'}\n                size={'medium'}\n                onClick={this.handleCreatePlaylistClick}\n                disabled={selectedArtistsIds.length === 0 || selectedArtistsIds.length > 3 || playlistName === ''}\n              >\n                <Typography style={{ textTransform: 'none' }}>Create</Typography>\n              </Button>\n            </ThemeProvider>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  };\n}\n\nexport default CreatePlaylist;\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { SnackbarProps } from '@material-ui/core';\n\nimport CreatePlaylist from './CreatePlaylist';\nimport { fetchTopArtists, openSnackbar } from 'common/actions';\nimport { clearPlaylist } from 'components/Playlists/actions';\nimport { IRootState, IAction } from 'common/interfaces';\nimport { IStateProps, IDispatchProps } from './interfaces';\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<\n    IRootState,\n    null,\n    IAction<SpotifyApi.UsersTopArtistsResponse> | IAction<Partial<SnackbarProps>> | IAction<unknown>\n  >\n): IDispatchProps => {\n  return {\n    fetchTopArtists: (api: SpotifyWebApi, timeRange: 'long_term' | 'medium_term' | 'short_term') =>\n      dispatch(fetchTopArtists(api, timeRange)),\n    openSnackBar: (data: Partial<SnackbarProps>) => dispatch(openSnackbar(data)),\n    clearPlaylist: () => dispatch(clearPlaylist()),\n  };\n};\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n    user: state.user!,\n    tracksAttributes: state.tracksAttributes,\n    topArtists: state.topArtists,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreatePlaylist));\n","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { MapStateToPropsParam, connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Divider, Avatar } from '@material-ui/core';\n\nimport { IRootState } from 'common/interfaces';\n\nexport interface IProfileProps {}\n\nexport interface IStateProps {\n  user: SpotifyApi.CurrentUsersProfileResponse | null;\n}\n\nexport type TProfileProps = IProfileProps & IStateProps & RouteComponentProps;\n\nclass Profile extends React.PureComponent<TProfileProps> {\n  public render = (): JSX.Element | null => {\n    let { user } = this.props;\n\n    if (!user) return null;\n\n    return (\n      <div>\n        <Divider />\n        <br />\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar\n            alt={user.display_name}\n            src={user.images && user.images[0] && user.images[0].url}\n            style={{\n              width: '100px',\n              height: '100px',\n            }}\n          />\n          <h1\n            style={{\n              color: 'white',\n              padding: '8px 16px',\n              wordWrap: 'break-word',\n            }}\n          >\n            {user.display_name}\n          </h1>\n          <Divider />\n        </div>\n      </div>\n    );\n  };\n}\n\nconst mapStateToProps: MapStateToPropsParam<IStateProps, IProfileProps, IRootState> = (\n  state: IRootState\n): IStateProps => {\n  return {\n    user: state.user,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(Profile));\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { Button, ThemeProvider, Typography } from '@material-ui/core';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport { IRootState } from 'common/interfaces';\n\nimport { buttonTheme } from 'common/themes';\n\nexport interface ISignOutProps {}\n\nexport interface IStateProps {\n  spotifyWebApi: SpotifyWebApi;\n}\n\nexport type TSignOutProps = ISignOutProps & IStateProps & RouteComponentProps;\n\nclass SignOut extends React.PureComponent<TSignOutProps> {\n  public onClickHandler = (_: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    let { spotifyWebApi, history } = this.props;\n\n    spotifyWebApi.resetAccessToken();\n\n    history.push('/');\n  };\n\n  public render = (): JSX.Element => {\n    return (\n      <div>\n        <ThemeProvider theme={buttonTheme}>\n          <Button onClick={this.onClickHandler}>\n            <Typography style={{ color: 'white', textTransform: 'none' }}>Sign out</Typography>\n          </Button>\n        </ThemeProvider>\n      </div>\n    );\n  };\n}\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(SignOut));\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MusicNote from '@material-ui/icons/MusicNote';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\n\nimport Profile from './subcomponents/Profile';\nimport SignOut from './subcomponents/SignOut';\nimport { Link } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    drawer: {\n      [theme.breakpoints.up('sm')]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n    appBar: {\n      backgroundColor: '#1D1E28',\n      [theme.breakpoints.up('sm')]: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n      },\n\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      ...theme.mixins.toolbar,\n\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    drawerPaper: {\n      width: drawerWidth,\n      backgroundColor: '#1D1E28',\n    },\n    content: {\n      flexGrow: 1,\n      backgroundColor: '#d3d3d3',\n      padding: theme.spacing(3),\n    },\n  })\n);\n\nexport default function ResponsiveDrawer(props: any) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const drawer = (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        height: 'inherit',\n      }}\n    >\n      <div>\n        <h1 style={{ color: 'white', padding: '8px 16px' }}>Apollo's Playlist</h1>\n        <Divider />\n        <List>\n          <Link to={'/playlists'} style={{ textDecoration: 'none' }}>\n            <ListItem button key={'Playlists'}>\n              <MusicNote style={{ color: 'white' }} />\n              <ListItemText primary={'Playlists'} style={{ color: 'white' }} />\n            </ListItem>\n          </Link>\n\n          <Link to={'/create-playlist'} style={{ textDecoration: 'none' }}>\n            <ListItem button key={'Create a Playlist'}>\n              <MusicNote style={{ color: 'white' }} />\n              <ListItemText primary={'Create a Playlist'} style={{ color: 'white' }} />\n            </ListItem>\n          </Link>\n        </List>\n        <Divider />\n      </div>\n      <div>\n        <Profile />\n        <Divider />\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <SignOut />\n        </div>\n      </div>\n    </div>\n  );\n\n  const container = document.body;\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Apollo's Playlist\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            <React.Fragment>{drawer}</React.Fragment>\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {props.children}\n      </main>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Snackbar } from '@material-ui/core';\n\nimport HomePage from 'components/HomePage';\nimport NotFound from 'components/NotFound';\nimport Playlist from 'components/Playlist';\nimport Playlists from 'components/Playlists';\nimport CreatePlaylist from 'components/CreatePlaylist';\nimport ResponsiveDrawer from 'components/ResponsiveDrawer/ResponsiveDrawer';\n\nimport { TAppProps } from './interfaces';\n\nimport './styles.scss';\n\nclass App extends React.PureComponent<TAppProps> {\n  public componentDidMount = (): void => {\n    let { history, spotifyWebApi, openSnackbar } = this.props;\n    let { location } = history;\n    let { pathname } = location;\n\n    let treatedPathname: string = '?' + pathname.substring(1);\n    let params: URLSearchParams = new URLSearchParams(treatedPathname);\n\n    if (!!params.get('expires_in')) {\n      let expiresIn: Date = new Date();\n      expiresIn.setSeconds(expiresIn.getSeconds() + Number(params.get('expires_in')!));\n\n      setInterval(() => {\n        if (new Date() >= expiresIn) {\n          clearInterval();\n          spotifyWebApi.resetAccessToken();\n          openSnackbar({\n            open: true,\n            message: 'Oops! Looks like your session has expired',\n            autoHideDuration: null,\n            anchorOrigin: { horizontal: 'center', vertical: 'top' },\n          });\n        }\n      }, 1000);\n    }\n  };\n\n  public render = (): JSX.Element => {\n    let { closeSnackbar, snackbar, spotifyWebApi } = this.props;\n    let isLoggedIn: boolean = !!spotifyWebApi.getAccessToken();\n\n    if (!isLoggedIn) {\n      return (\n        <div className=\"apollos-playlist-container\">\n          <Snackbar {...snackbar} onClose={closeSnackbar} />\n          <HomePage />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"apollos-playlist-container\">\n        <ResponsiveDrawer>\n          <Snackbar {...snackbar} onClose={closeSnackbar} />\n          <Switch>\n            <Route exact path={['/', '/playlists']} component={Playlists} />\n            <Route path={'/playlists/:playlistId'} component={Playlist} />\n            <Route exact path={'/create-playlist'} component={CreatePlaylist} />\n            <Route path=\"*\" component={NotFound} />\n          </Switch>\n        </ResponsiveDrawer>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","import { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport App from './App';\nimport { fetchUser, closeSnackbar, openSnackbar } from 'common/actions';\nimport { IAction, IRootState } from 'common/interfaces';\nimport { IDispatchProps, IStateProps } from './interfaces';\nimport { SnackbarProps } from '@material-ui/core';\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n    user: state.user,\n    snackbar: state.snackbar,\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<\n    IRootState,\n    null,\n    IAction<SpotifyApi.CurrentUsersProfileResponse> | IAction<unknown> | IAction<Partial<SnackbarProps>>\n  >\n): IDispatchProps => {\n  return {\n    fetchUser: (api: SpotifyWebApi) => dispatch(fetchUser(api)),\n    openSnackbar: (data: Partial<SnackbarProps>) => dispatch(openSnackbar(data)),\n    closeSnackbar: () => dispatch(closeSnackbar()),\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","import merge from 'lodash/merge';\nimport { SnackbarProps } from '@material-ui/core';\n\nimport { IAction } from 'common/interfaces';\nimport { SNACKBAR } from 'common/actions/snackbar';\n\nexport const initialSnackbarState: SnackbarProps = {\n  open: false,\n  message: '',\n  autoHideDuration: 10000,\n  anchorOrigin: { vertical: 'bottom', horizontal: 'right' },\n};\n\nexport const snackBarReducer = (\n  state: SnackbarProps = initialSnackbarState,\n  action: IAction<Partial<SnackbarProps>>\n): SnackbarProps => {\n  switch (action.type) {\n    case SNACKBAR.OPEN:\n      return merge({}, state, action.data);\n\n    case SNACKBAR.CLOSE:\n      return merge({}, state, { ...state, open: false });\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\nimport { clientReducer, userReducer, tracksAttributesReducer } from 'common/reducers';\nimport { playlistsReducer } from 'components/Playlists/reducer';\nimport { playlistReducer } from 'components/Playlist/reducer';\nimport { topArtistsReducer } from 'components/TopArtists/reducer';\nimport { snackBarReducer } from 'components/Snackbar/reducer';\n\nexport default combineReducers({\n  spotifyWebApi: clientReducer,\n  user: userReducer,\n  playlists: playlistsReducer,\n  playlist: playlistReducer,\n  tracksAttributes: tracksAttributesReducer,\n  topArtists: topArtistsReducer,\n  snackbar: snackBarReducer,\n});\n","import SpotifyWebApi from 'spotify-web-api-node';\n\nimport { clientId, redirectUri } from 'authorization';\n\nexport const clientReducer = (\n  state: SpotifyWebApi = new SpotifyWebApi({\n    clientId,\n    redirectUri,\n  })\n): SpotifyWebApi => {\n  return state;\n};\n","import { USER } from 'common/actions';\nimport { IAction } from 'common/interfaces';\n\nexport const userReducer = (\n  state: SpotifyApi.CurrentUsersProfileResponse | null = null,\n  action: IAction<SpotifyApi.CurrentUsersProfileResponse>\n): SpotifyApi.CurrentUsersProfileResponse | null => {\n  switch (action.type) {\n    case USER.RECEIVE_USER:\n      return action.data;\n\n    default:\n      return state;\n  }\n};\n","import merge from 'lodash/merge';\n\nimport { PLAYLISTS } from './actions';\nimport { IAction, IPagingObject } from 'common/interfaces';\n\nexport const playlistsReducer = (\n  state: IPagingObject<SpotifyApi.PlaylistObjectSimplified> | null = null,\n  action: IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>>\n): IPagingObject<SpotifyApi.PlaylistObjectSimplified> | null => {\n  switch (action.type) {\n    case PLAYLISTS.RECEIVE_PLAYLISTS:\n      return merge({}, state, action.data);\n\n    case PLAYLISTS.CLEAR:\n      return null;\n\n    default:\n      return state;\n  }\n};\n","import merge from 'lodash/merge';\n\nimport { PLAYLIST } from './actions';\nimport { IAction } from 'common/interfaces';\n\nexport const playlistReducer = (\n  state: SpotifyApi.SinglePlaylistResponse | null = null,\n  action: IAction<SpotifyApi.SinglePlaylistResponse>\n): SpotifyApi.SinglePlaylistResponse | null => {\n  switch (action.type) {\n    case PLAYLIST.RECEIVE_PLAYLIST:\n      return merge({}, state, action.data);\n\n    default:\n      return state;\n  }\n};\n","import merge from 'lodash/merge';\n\nimport { TRACKS_ATTRIBUTES } from 'common/actions';\nimport { IAction } from 'common/interfaces';\n\nexport const tracksAttributesReducer = (\n  state: SpotifyApi.MultipleAudioFeaturesResponse | null = null,\n  action: IAction<SpotifyApi.MultipleAudioFeaturesResponse>\n): SpotifyApi.MultipleAudioFeaturesResponse | null => {\n  switch (action.type) {\n    case TRACKS_ATTRIBUTES.RECEIVE_TRACKS_ATTRIBUTES:\n      return merge({}, state, action.data);\n\n    default:\n      return state;\n  }\n};\n","import merge from 'lodash/merge';\n\nimport { TOP_ARTISTS } from 'common/actions/topArtists';\nimport { IAction } from 'common/interfaces';\n\nexport const topArtistsReducer = (\n  state: ITopArtistsReducer | null = null,\n  action: IAction<SpotifyApi.UsersTopArtistsResponse>\n): ITopArtistsReducer | null => {\n  switch (action.type) {\n    case TOP_ARTISTS.RECEIVE_TOP_ARTISTS_LONG_TERM:\n      return merge({}, state, { longTerm: action.data });\n\n    case TOP_ARTISTS.RECEIVE_TOP_ARTISTS_MEDIUM_TERM:\n      return merge({}, state, { mediumTerm: action.data });\n\n    case TOP_ARTISTS.RECEIVE_TOP_ARTISTS_SHORT_TERM:\n      return merge({}, state, { shortTerm: action.data });\n\n    default:\n      return state;\n  }\n};\n\nexport interface ITopArtistsReducer {\n  longTerm: SpotifyApi.UsersTopArtistsResponse | null;\n  mediumTerm: SpotifyApi.UsersTopArtistsResponse | null;\n  shortTerm: SpotifyApi.UsersTopArtistsResponse | null;\n}\n","import { createStore, applyMiddleware, Store } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport { clientId, redirectUri } from 'authorization';\n\nimport { initialSnackbarState } from 'components/Snackbar/reducer';\nimport rootReducer from './rootReducer';\nimport { IRootState } from 'common/interfaces';\n\nconst defaultState: IRootState = {\n  spotifyWebApi: new SpotifyWebApi({\n    clientId: clientId,\n    redirectUri: redirectUri,\n  }),\n  user: null,\n  playlist: null,\n  playlists: null,\n  tracksAttributes: null,\n  topArtists: null,\n  snackbar: initialSnackbarState,\n};\n\nconst configureStore = (preloadedState: IRootState = defaultState): Store<IRootState> => {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    process.env.NODE_ENV === 'development' ? composeWithDevTools(applyMiddleware(thunk)) : applyMiddleware(thunk)\n  );\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Store } from 'redux';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from 'core/app';\nimport configureStore from 'redux/store';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const root: HTMLElement = document.getElementById('root') as HTMLElement;\n  const store: Store = configureStore();\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>,\n    root\n  );\n});\n"],"sourceRoot":""}