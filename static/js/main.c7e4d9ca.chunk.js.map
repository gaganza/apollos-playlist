{"version":3,"sources":["common/actions/spotifyClient.ts","authorization/auth.ts","components/SignIn/SignIn.tsx","common/actions/user.ts","common/actions/tracksAttributes.ts","common/actions/topArtists.ts","common/actions/snackbar.ts","components/SignIn/index.ts","components/HomePage/HomePage.tsx","components/HomePage/index.ts","components/Playlist/actions.ts","components/NotFound/NotFound.tsx","components/NotFound/index.ts","common/helpers/stringHelpers.ts","common/themes/button.ts","common/themes/slider.ts","common/themes/input.ts","common/themes/chip.ts","common/themes/table.ts","common/themes/linearProgressTheme.ts","components/Playlist/Playlist.tsx","components/Playlist/helpers/formatHelpers.ts","common/helpers/dateTimeHelpers.ts","components/Playlists/actions.ts","components/Playlist/index.ts","components/Playlists/subcomponents/PlaylistCard.tsx","components/Playlists/Playlists.tsx","common/constants/pagination.ts","components/Playlists/index.ts","components/CreatePlaylist/CreatePlaylist.tsx","components/CreatePlaylist/index.ts","components/ResponsiveDrawer/subcomponents/Profile.tsx","components/ResponsiveDrawer/subcomponents/SignOut.tsx","components/ResponsiveDrawer/ResponsiveDrawer.tsx","core/app/App.tsx","core/app/index.ts","components/Snackbar/reducer.ts","redux/rootReducer.ts","common/reducers/spotifyClient.ts","common/reducers/user.ts","components/Playlists/reducer.ts","components/Playlist/reducer.ts","common/reducers/tracksAttributes.ts","components/TopArtists/reducer.ts","redux/store.ts","index.tsx"],"names":["SPOTIFT_API","clientId","redirectUri","SignIn","onSuccessHandler","data","a","props","setGlobalSpotifyClient","history","fetchUser","cookie","Cookies","set","camelize","accessToken","path","get","spotifyWebApi","then","_","push","onErrorHandler","console","log","name","message","className","scope","onSuccess","this","onFailure","React","USER","token","type","SET_GLOBAL_SPOTIFY_CLIENT_TOKEN","TRACKS_ATTRIBUTES","api","dispatch","getMe","response","body","RECEIVE_USER","TOP_ARTISTS","fetchTracksAttributes","trackIds","getAudioFeaturesForTracks","RECEIVE_TRACKS_ATTRIBUTES","SNACKBAR","fetchTopArtists","timeRange","getMyTopArtists","time_range","RECEIVE_TOP_ARTISTS_LONG_TERM","RECEIVE_TOP_ARTISTS_MEDIUM_TERM","receiveTopArtistsMediumTerm","RECEIVE_TOP_ARTISTS_SHORT_TERM","receiveTopArtistsShortTerm","openSnackbar","OPEN","withRouter","connect","state","Copyright","Typography","variant","color","align","style","Link","href","Date","getFullYear","useStyles","makeStyles","theme","root","height","backgroundColor","image","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","avatar","form","width","marginTop","submit","PLAYLIST","classes","Grid","container","component","CssBaseline","item","xs","sm","md","Paper","elevation","square","Box","mt","NotFound","capitalizeFirstLetter","str","charAt","toUpperCase","slice","buttonTheme","createMuiTheme","overrides","MuiButton","containedPrimary","sliderTheme","MuiSlider","thumbColorPrimary","track","rail","valueLabel","inputTheme","palette","primary","main","dark","MuiInput","MuiFormControl","chipTheme","MuiChip","tableTheme","MuiTableCell","paddingLeft","paddingRight","paddingTop","paddingBottom","linearProgresTheme","MuiLinearProgress","borderRadius","colorPrimary","barColorPrimary","bar","Playlist","loading","window","scrollTo","top","behavior","location","fetchPlaylist","playlistId","pathname","substring","lastIndexOf","playlist","id","tracks","items","map","playlistToTrackIds","setState","images","length","src","url","maxWidth","maxHeight","alt","owner","display_name","normalizedData","attribute","ThemeProvider","LinearProgress","value","tracksAttributes","normalized","acousticness","danceability","energy","instrumentalness","valence","count","audio_features","forEach","feature","normalizeTrackAudioFeature","direction","renderAttributeBar","TableContainer","Table","TableBody","TableRow","hover","key","TableCell","album","artists","input","totalHours","totalMinutes","totalSeconds","hours","minutes","seconds","result","Math","floor","toString","millisecondsToViewableFormat","duration_ms","renderPlaylistArtwork","renderPlaylistName","renderPlaylistOwner","renderPlaylistAnalysis","renderTracks","PLAYLISTS","getPlaylist","RECEIVE_PLAYLIST","tracksId","cardTheme","MuiCard","boxShadow","PlaylistCard","to","textDecoration","Card","CardActionArea","CardMedia","padding","title","CardContent","Playlists","handlePaginationChange","page","fetchPlaylists","user","undefined","playlists","limit","offset","search","lg","xl","Pagination","total","onChange","userId","options","getUserPlaylists","RECEIVE_PLAYLISTS","receivePlaylist","CreatePlaylist","componentDidMount","valueLabelFormat","round","handleSliderChange","attr","newValue","query","min","max","handlePlaylistNameChange","event","playlistName","target","handleArtistSelect","selectedArtistsIds","handleCreatePlaylistClick","getRecommendations","min_acousticness","max_acousticness","min_danceability","max_danceability","min_energy","max_energy","min_instrumentalness","max_instrumentalness","min_valence","max_valence","seed_artists","createPlaylist","uri","addTracksToPlaylist","clearPlaylist","openSnackBar","open","renderPlaylistNameInput","TextField","renderAttributeSlider","Slider","valueLabelDisplay","step","renderArtistSelect","FormControl","error","Select","multiple","Input","multiline","renderValue","selected","flexWrap","Chip","label","find","Avatar","sort","b","artist","MenuItem","FormHelperText","render","topArtists","longTerm","mediumTerm","shortTerm","concat","filter","e","i","findIndex","justify","Button","size","onClick","disabled","CLEAR","Profile","Divider","wordWrap","SignOut","onClickHandler","remove","createStyles","drawer","breakpoints","up","flexShrink","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","content","flexGrow","ResponsiveDrawer","useTheme","useState","mobileOpen","setMobileOpen","handleDrawerToggle","justifyContent","List","ListItem","button","ListItemText","document","AppBar","position","Toolbar","IconButton","aria-label","edge","noWrap","Hidden","smUp","implementation","Drawer","anchor","onClose","ModalProps","keepMounted","Fragment","xsDown","children","App","getAccessToken","closeSnackbar","snackbar","Snackbar","exact","HomePage","CLOSE","initialSnackbarState","autoHideDuration","anchorOrigin","vertical","horizontal","combineReducers","SpotifyWebApi","action","setAccessToken","merge","defaultState","configureStore","preloadedState","createStore","rootReducer","applyMiddleware","thunk","addEventListener","getElementById","store","ReactDOM"],"mappings":"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","file":"static/js/main.c7e4d9ca.chunk.js","sourcesContent":["import { IAction } from 'common/interfaces';\n\nexport enum SPOTIFT_API {\n  SET_GLOBAL_SPOTIFY_CLIENT_TOKEN = 'spotifyApi/SET_GLOBAL_SPOTIFY_CLIENT_TOKEN',\n}\n\nexport const setGlobalSpotifyClient = (token: string): IAction<string> => {\n  return {\n    type: SPOTIFT_API.SET_GLOBAL_SPOTIFY_CLIENT_TOKEN,\n    data: token,\n  };\n};\n","export const scopes: string =\n  'playlist-read-collaborative playlist-modify-public user-top-read playlist-read-private playlist-modify-private';\n\nexport const clientSecret: string =\n  process.env.NODE_ENV === 'development' ? 'fc20b72c74f74a1c8fd2b30269efe82c' : 'c96b4f7d709c49d6aa0f57f49aa4ab5b';\n\nexport const clientId: string =\n  process.env.NODE_ENV === 'development' ? 'a91af95c5d8c4e178920646664034328' : 'a5c714fac13f4b5c924497c3b9e533a2';\n\nexport const redirectUri: string =\n  process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : 'https://gaganza.github.io/apollos-playlist/';\n","import * as React from 'react';\nimport SpotifyLogin from 'react-spotify-login';\nimport camelize from 'camelize';\nimport Cookies from 'universal-cookie';\n\nimport { redirectUri, clientId, scopes } from 'authorization';\n\nimport { IAuthorizationResponse, IAuthorizationErrorResponse } from 'common/interfaces';\nimport { TSignInProps } from './interfaces';\n\nimport './style.scss';\n\nclass SignIn extends React.PureComponent<TSignInProps> {\n  public onSuccessHandler: (data: IAuthorizationResponse) => void = async (data: IAuthorizationResponse) => {\n    let { setGlobalSpotifyClient, history, fetchUser } = this.props;\n    const cookie = new Cookies();\n    cookie.set('spotify-bearer', camelize(data).accessToken, {\n      path: '/',\n    });\n\n    setGlobalSpotifyClient(cookie.get('spotify-bearer'));\n    await fetchUser(this.props.spotifyWebApi).then((_: void) => {\n      history.push('/playlists');\n    });\n  };\n\n  public onErrorHandler: (data: IAuthorizationErrorResponse) => void = (data: IAuthorizationErrorResponse) => {\n    console.log(data.name, data.message);\n  };\n\n  public render(): JSX.Element {\n    return (\n      <div className={'sign-in-button-container'}>\n        <SpotifyLogin\n          redirectUri={redirectUri}\n          clientId={clientId}\n          scope={scopes}\n          onSuccess={this.onSuccessHandler}\n          onFailure={this.onErrorHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SignIn;\n","import { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport { IRootState, IAction, Response } from 'common/interfaces';\n\nexport enum USER {\n  RECEIVE_USER = 'user/RECEIVE_USER',\n}\n\nexport const receiveUser = (\n  data: SpotifyApi.CurrentUsersProfileResponse\n): IAction<SpotifyApi.CurrentUsersProfileResponse> => {\n  return { type: USER.RECEIVE_USER, data };\n};\n\nexport const fetchUser = (\n  api: SpotifyWebApi\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<SpotifyApi.CurrentUsersProfileResponse>> => {\n  return (dispatch: Dispatch<IAction<SpotifyApi.CurrentUsersProfileResponse>>): Promise<void> => {\n    return api.getMe().then((response: Response<SpotifyApi.CurrentUsersProfileResponse>) => {\n      dispatch(receiveUser(response.body));\n    });\n  };\n};\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { IAction, Response, IRootState } from 'common/interfaces';\n\nexport enum TRACKS_ATTRIBUTES {\n  RECEIVE_TRACKS_ATTRIBUTES = 'trackAttributes/RECEIVE_TRACKS_ATTRIBUTES',\n}\n\nexport const receiveTrackAttributes = (\n  data: SpotifyApi.MultipleAudioFeaturesResponse\n): IAction<SpotifyApi.MultipleAudioFeaturesResponse> => {\n  return { type: TRACKS_ATTRIBUTES.RECEIVE_TRACKS_ATTRIBUTES, data };\n};\n\nexport const fetchTracksAttributes = (\n  api: SpotifyWebApi,\n  trackIds: string[]\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<SpotifyApi.MultipleAudioFeaturesResponse>> => {\n  return (dispatch: Dispatch<IAction<SpotifyApi.MultipleAudioFeaturesResponse>>): Promise<void> => {\n    return api\n      .getAudioFeaturesForTracks(trackIds)\n      .then((response: Response<SpotifyApi.MultipleAudioFeaturesResponse>) => {\n        dispatch(receiveTrackAttributes(response.body));\n      });\n  };\n};\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\nimport { IAction, IRootState, Response } from 'common/interfaces';\n\nexport enum TOP_ARTISTS {\n  RECEIVE_TOP_ARTISTS_LONG_TERM = 'topArtsits/RECEIVE_TOP_ARTISTS_LONG_TERM',\n  RECEIVE_TOP_ARTISTS_MEDIUM_TERM = 'topArtsits/RECEIVE_TOP_ARTISTS_MEDIUM_TERM',\n  RECEIVE_TOP_ARTISTS_SHORT_TERM = 'topArtsits/RECEIVE_TOP_ARTISTS_SHORT_TERM',\n}\n\nexport const receiveTopArtistsLongTerm = (\n  data: SpotifyApi.UsersTopArtistsResponse\n): IAction<SpotifyApi.UsersTopArtistsResponse> => {\n  return { type: TOP_ARTISTS.RECEIVE_TOP_ARTISTS_LONG_TERM, data };\n};\n\nexport const receiveTopArtistsMediumTerm = (\n  data: SpotifyApi.UsersTopArtistsResponse\n): IAction<SpotifyApi.UsersTopArtistsResponse> => {\n  return { type: TOP_ARTISTS.RECEIVE_TOP_ARTISTS_MEDIUM_TERM, data };\n};\n\nexport const receiveTopArtistsShortTerm = (\n  data: SpotifyApi.UsersTopArtistsResponse\n): IAction<SpotifyApi.UsersTopArtistsResponse> => {\n  return { type: TOP_ARTISTS.RECEIVE_TOP_ARTISTS_SHORT_TERM, data };\n};\n\nexport const fetchTopArtists = (\n  api: SpotifyWebApi,\n  timeRange: 'long_term' | 'medium_term' | 'short_term'\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<SpotifyApi.UsersTopArtistsResponse>> => {\n  return (dispatch: Dispatch<IAction<SpotifyApi.UsersTopArtistsResponse>>): Promise<void> => {\n    return api\n      .getMyTopArtists({ time_range: timeRange })\n      .then((response: Response<SpotifyApi.UsersTopArtistsResponse>) => {\n        if (timeRange === 'long_term') {\n          dispatch(receiveTopArtistsLongTerm(response.body));\n        } else if (timeRange === 'medium_term') {\n          dispatch(receiveTopArtistsMediumTerm(response.body));\n        } else {\n          dispatch(receiveTopArtistsShortTerm(response.body));\n        }\n      });\n  };\n};\n","import { SnackbarProps } from '@material-ui/core';\n\nimport { IAction } from 'common/interfaces';\n\nexport enum SNACKBAR {\n  OPEN = 'snackbar/OPEN',\n  CLOSE = 'snackbar/CLOSE',\n}\n\nexport const openSnackbar = (data: Partial<SnackbarProps>): IAction<Partial<SnackbarProps>> => {\n  return { type: SNACKBAR.OPEN, data };\n};\n\nexport const closeSnackbar = (): IAction<unknown> => {\n  return { type: SNACKBAR.CLOSE, data: undefined };\n};\n","import { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { withRouter } from 'react-router-dom';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport SignIn from './SignIn';\nimport { setGlobalSpotifyClient, fetchUser } from 'common/actions';\nimport { IAction, IRootState } from 'common/interfaces';\nimport { IStateProps, IDispatchProps } from './interfaces';\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<IRootState, null, IAction<string> | IAction<SpotifyApi.CurrentUsersProfileResponse>>\n): IDispatchProps => {\n  return {\n    setGlobalSpotifyClient: (token: string) => dispatch(setGlobalSpotifyClient(token)),\n    fetchUser: (api: SpotifyWebApi) => dispatch(fetchUser(api)),\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SignIn));\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SignIn from 'components/SignIn';\n\nimport './styles.scss';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\" style={{ color: 'white' }}>\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https:/apollosplaylist.com/\">\n        Apollo's Playlist\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n    backgroundColor: '#1D1E28',\n  },\n  image: {\n    backgroundImage:\n      'url(https://images.unsplash.com/photo-1507808973436-a4ed7b5e87c9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2000&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor: '#1D1E28',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    backgroundColor: '#1D1E28',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: '#1D1E28',\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignInSide() {\n  const classes = useStyles();\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square className={'apollos-playlist__home-page'}>\n        <div className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h5\" style={{ color: 'white ' }}>\n            Apollo's Playlist\n          </Typography>\n          <SignIn />\n          <Box mt={5}>\n            <Copyright />\n          </Box>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n","import { withRouter } from 'react-router-dom';\n\nimport HomePage from './HomePage';\n\nexport default withRouter(HomePage);\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { IAction, Response, IRootState } from 'common/interfaces';\n\nexport enum PLAYLIST {\n  RECEIVE_PLAYLIST = 'playlist/RECEIVE_PLAYLIST',\n}\n\nexport const receivePlaylist = (\n  data: SpotifyApi.SinglePlaylistResponse\n): IAction<SpotifyApi.SinglePlaylistResponse> => {\n  return { type: PLAYLIST.RECEIVE_PLAYLIST, data };\n};\n\nexport const fetchPlaylist = (\n  api: SpotifyWebApi,\n  playlistId: string\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<SpotifyApi.SinglePlaylistResponse>> => {\n  return (dispatch: Dispatch<IAction<SpotifyApi.SinglePlaylistResponse>>): Promise<void> => {\n    return api.getPlaylist(playlistId).then((response: Response<SpotifyApi.SinglePlaylistResponse>) => {\n      dispatch(receivePlaylist(response.body));\n    });\n  };\n};\n","import * as React from 'react';\n\nimport { TNotFoundProps } from './interfaces';\n\nclass NotFound extends React.PureComponent<TNotFoundProps> {\n  public render(): JSX.Element {\n    return <div>Not Found</div>;\n  }\n}\n\nexport default NotFound;\n","import { withRouter } from 'react-router-dom';\n\nimport NotFound from './NotFound';\n\nexport default withRouter(NotFound);\n","export const capitalizeFirstLetter = (str: string): string => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const buttonTheme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      containedPrimary: {\n        backgroundColor: '#1D1E28',\n        '&:hover': {\n          backgroundColor: 'grey',\n        },\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const sliderTheme = createMuiTheme({\n  overrides: {\n    MuiSlider: {\n      thumbColorPrimary: {\n        backgroundColor: '#1D1E28',\n      },\n      track: {\n        backgroundColor: '#1D1E28',\n      },\n      rail: {\n        backgroundColor: 'gray',\n      },\n      valueLabel: {\n        color: '#1D1E28',\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const inputTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#1D1E28',\n      dark: '#1D1E28',\n    },\n  },\n  overrides: {\n    MuiInput: {\n      root: {\n        width: '100%',\n      },\n    },\n\n    MuiFormControl: {\n      root: {\n        width: '100%',\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const chipTheme = createMuiTheme({\n  overrides: {\n    MuiChip: {\n      root: {\n        margin: '8px',\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const tableTheme = createMuiTheme({\n  overrides: {\n    MuiTableCell: {\n      root: {\n        paddingLeft: '0px',\n        paddingRight: '8px',\n        paddingTop: '4px',\n        paddingBottom: '4px',\n      },\n    },\n  },\n});\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nexport const linearProgresTheme = createMuiTheme({\n  overrides: {\n    MuiLinearProgress: {\n      root: {\n        height: 10,\n        borderRadius: 5,\n      },\n      colorPrimary: {\n        backgroundColor: 'grey',\n      },\n      barColorPrimary: {\n        backgroundColor: '#1D1E28',\n      },\n      bar: {\n        borderRadius: 5,\n      },\n    },\n  },\n});\n","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { Table, TableContainer, TableRow, TableCell, TableBody, Typography, LinearProgress } from '@material-ui/core';\nimport PersonIcon from '@material-ui/icons/Person';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport { capitalizeFirstLetter, millisecondsToViewableFormat } from 'common/helpers';\nimport { playlistToTrackIds, normalizeTrackAudioFeature } from './helpers';\nimport { IAudioFeatures } from 'common/interfaces';\nimport { TPlaylistProps, IPlaylistState } from './interfaces';\n\nimport { tableTheme, linearProgresTheme } from 'common/themes';\n\nclass Playlist extends React.Component<TPlaylistProps, IPlaylistState> {\n  public constructor(props: TPlaylistProps) {\n    super(props);\n\n    this.state = { loading: true };\n  }\n\n  public componentDidMount(): void {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n    let { location, spotifyWebApi, fetchPlaylist, fetchTracksAttributes } = this.props;\n\n    let playlistId: string = location.pathname.substring(location.pathname.lastIndexOf('/') + 1);\n\n    if (playlistId !== this.props.playlist?.id) {\n      fetchPlaylist(spotifyWebApi, playlistId).then(() => {\n        let { playlist } = this.props;\n\n        if (!playlist) return;\n        fetchTracksAttributes(spotifyWebApi, playlistToTrackIds(playlist));\n      });\n    }\n\n    this.setState({ loading: false });\n  }\n\n  public renderPlaylistArtwork(playlist: SpotifyApi.SinglePlaylistResponse): JSX.Element | null {\n    if (!playlist || !playlist.images || playlist.images.length === 0) return null;\n\n    return (\n      <img\n        src={playlist.images[0].url}\n        style={{ maxWidth: '300px', maxHeight: '300px ' }}\n        alt={`${playlist.name} playlist artwork`}\n      />\n    );\n  }\n\n  public renderPlaylistName(playlist: SpotifyApi.SinglePlaylistResponse): JSX.Element | null {\n    if (!playlist) return null;\n\n    return <Typography>{playlist.name}</Typography>;\n  }\n\n  public renderPlaylistOwner(playlist: SpotifyApi.SinglePlaylistResponse): JSX.Element | null {\n    if (!playlist) return null;\n\n    return (\n      <div style={{ display: 'flex', alignItems: 'row' }}>\n        <PersonIcon />\n        <Typography>{playlist.owner.display_name}</Typography>\n      </div>\n    );\n  }\n\n  public renderAttributeBar(normalizedData: IAudioFeatures, attribute: keyof IAudioFeatures): JSX.Element {\n    return (\n      <div>\n        <Typography>{capitalizeFirstLetter(attribute)}</Typography>\n        <ThemeProvider theme={linearProgresTheme}>\n          <LinearProgress variant=\"determinate\" value={normalizedData[attribute]} />\n        </ThemeProvider>\n      </div>\n    );\n  }\n\n  public renderPlaylistAnalysis(tracksAttributes: SpotifyApi.MultipleAudioFeaturesResponse): JSX.Element | null {\n    if (!tracksAttributes) return null;\n\n    let normalizedData: IAudioFeatures = normalizeTrackAudioFeature(tracksAttributes);\n\n    return (\n      <Grid container spacing={1} direction={'column'}>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'acousticness')}</Grid>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'danceability')}</Grid>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'energy')}</Grid>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'instrumentalness')}</Grid>\n        <Grid item>{this.renderAttributeBar(normalizedData, 'valence')}</Grid>\n      </Grid>\n    );\n  }\n\n  public renderTracks(playlist: SpotifyApi.SinglePlaylistResponse): JSX.Element | null {\n    if (!playlist) return null;\n\n    return (\n      <ThemeProvider theme={tableTheme}>\n        <TableContainer>\n          <Table>\n            <TableBody>\n              {playlist.tracks.items.map((track: SpotifyApi.PlaylistTrackObject) => (\n                <TableRow hover key={`table-row-${track.track.id}`}>\n                  <TableCell style={{ width: '50px' }}>\n                    <img\n                      style={{ maxHeight: '50px', maxWidth: '50px' }}\n                      src={track.track.album.images[0].url}\n                      alt={'Album artwork for the song'}\n                    />\n                  </TableCell>\n                  <TableCell style={{ display: 'felx', flexDirection: 'column' }}>\n                    <div>{track.track.name}</div>\n                    <div>\n                      {track.track.artists[0].name} - {track.track.album.name}\n                    </div>\n                  </TableCell>\n                  <TableCell>{millisecondsToViewableFormat(track.track.duration_ms)}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ThemeProvider>\n    );\n  }\n\n  public render(): JSX.Element | null {\n    let { location, playlist, tracksAttributes } = this.props;\n    let { loading } = this.state;\n\n    let playlistId: string = location.pathname.substring(location.pathname.lastIndexOf('/') + 1);\n\n    if (!playlist || playlist.id !== playlistId) return null;\n    if (!tracksAttributes) return null;\n\n    return (\n      <Grid container spacing={3}>\n        {loading && (\n          <Grid item xs={12}>\n            <ThemeProvider theme={linearProgresTheme}>\n              <LinearProgress />\n            </ThemeProvider>\n          </Grid>\n        )}\n\n        <Grid item xs={12} md={6}>\n          {this.renderPlaylistArtwork(playlist)}\n        </Grid>\n        <Grid item xs={12} md={6}>\n          {this.renderPlaylistName(playlist)}\n          <br />\n          {this.renderPlaylistOwner(playlist)}\n          <br />\n          {this.renderPlaylistAnalysis(tracksAttributes)}\n        </Grid>\n        <Grid item xs={12}>\n          {this.renderTracks(playlist)}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default Playlist;\n","import { IAudioFeatures } from 'common/interfaces';\n\nexport const playlistToTrackIds = (playlist: SpotifyApi.SinglePlaylistResponse): string[] => {\n  return playlist.tracks.items.map((item: SpotifyApi.PlaylistTrackObject) => {\n    return item.track.id;\n  });\n};\n\nexport const normalizeTrackAudioFeature = (\n  tracksAttributes: SpotifyApi.MultipleAudioFeaturesResponse\n): IAudioFeatures => {\n  let normalized: IAudioFeatures = {\n    acousticness: 0.0,\n    danceability: 0.0,\n    energy: 0.0,\n    instrumentalness: 0.0,\n    valence: 0.0,\n  };\n\n  let count: number = tracksAttributes.audio_features.length;\n\n  tracksAttributes.audio_features.forEach((feature: SpotifyApi.AudioFeaturesObject) => {\n    normalized.acousticness += feature.acousticness;\n    normalized.danceability += feature.danceability;\n    normalized.energy += feature.energy;\n    normalized.instrumentalness += feature.instrumentalness;\n    normalized.valence += feature.valence;\n  });\n\n  normalized.acousticness = (normalized.acousticness / count) * 100;\n  normalized.danceability = (normalized.danceability / count) * 100;\n  normalized.energy = (normalized.energy / count) * 100;\n  normalized.instrumentalness = (normalized.instrumentalness / count) * 100;\n  normalized.valence = (normalized.valence / count) * 100;\n\n  return normalized;\n};\n","export const millisecondsToViewableFormat = (input: number): string => {\n  let totalHours,\n    totalMinutes,\n    totalSeconds,\n    hours,\n    minutes,\n    seconds,\n    result = '';\n\n  totalSeconds = input / 1000;\n  totalMinutes = totalSeconds / 60;\n  totalHours = totalMinutes / 60;\n\n  seconds = Math.floor(totalSeconds) % 60;\n  minutes = Math.floor(totalMinutes) % 60;\n  hours = Math.floor(totalHours) % 60;\n\n  if (hours !== 0) {\n    result += hours + ':';\n\n    if (minutes.toString().length === 1) {\n      minutes = '0' + minutes;\n    }\n  }\n\n  result += minutes + ':';\n\n  if (seconds.toString().length === 1) {\n    seconds = '0' + seconds;\n  }\n\n  result += seconds;\n\n  return result;\n};\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { Dispatch } from 'react';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { PLAYLIST_RESULTS_PER_PAGE } from 'common/constants';\nimport { IAction, Response, IPagingObject, IRootState, IPaginationOptions } from 'common/interfaces';\n\nexport enum PLAYLISTS {\n  RECEIVE_PLAYLISTS = 'playlists/RECEIVE_PLAYLISTS',\n  CLEAR = 'playlist/CLEAR',\n}\n\nexport const receivePlaylist = (\n  data: IPagingObject<SpotifyApi.PlaylistObjectSimplified>\n): IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>> => {\n  return { type: PLAYLISTS.RECEIVE_PLAYLISTS, data };\n};\n\nexport const clearPlaylist = (): IAction<unknown> => {\n  return { type: PLAYLISTS.CLEAR, data: undefined };\n};\n\nexport const fetchPlaylists = (\n  api: SpotifyWebApi,\n  userId: string,\n  options: IPaginationOptions\n): ThunkAction<Promise<void>, IRootState, unknown, IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>>> => {\n  return (dispatch: Dispatch<IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>>>): Promise<void> => {\n    return api.getUserPlaylists(userId, options).then((response: Response<SpotifyApi.ListOfUsersPlaylistsResponse>) => {\n      let data: IPagingObject<SpotifyApi.PlaylistObjectSimplified> = {\n        total: response.body.total,\n        items: {\n          [options.offset / PLAYLIST_RESULTS_PER_PAGE + 1]: response.body.items,\n        },\n      };\n\n      dispatch(receivePlaylist(data));\n    });\n  };\n};\n","import { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { withRouter } from 'react-router-dom';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport Playlist from './Playlist';\nimport { fetchTracksAttributes } from 'common/actions';\nimport { fetchPlaylist } from './actions';\nimport { IAction, IRootState } from 'common/interfaces';\nimport { IStateProps, IDispatchProps } from './interfaces';\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<\n    IRootState,\n    null,\n    IAction<SpotifyApi.SinglePlaylistResponse> | IAction<SpotifyApi.MultipleAudioFeaturesResponse>\n  >\n): IDispatchProps => {\n  return {\n    fetchPlaylist: (api: SpotifyWebApi, playlistId: string) => dispatch(fetchPlaylist(api, playlistId)),\n    fetchTracksAttributes: (api: SpotifyWebApi, tracksId: string[]) => dispatch(fetchTracksAttributes(api, tracksId)),\n  };\n};\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n    playlist: state.playlist,\n    tracksAttributes: state.tracksAttributes,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Playlist));\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  CardMedia,\n  Card,\n  CardActionArea,\n  CardContent,\n  Typography,\n  createMuiTheme,\n  ThemeProvider,\n} from '@material-ui/core';\n\nconst cardTheme = createMuiTheme({\n  overrides: {\n    MuiCard: {\n      root: {\n        boxShadow: 'none',\n        '&:hover': {\n          boxShadow:\n            '0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)',\n        },\n      },\n    },\n  },\n});\n\nclass PlaylistCard extends React.PureComponent<SpotifyApi.PlaylistObjectSimplified> {\n  public render(): JSX.Element {\n    let { name, images, id } = this.props;\n\n    return (\n      <Link to={`/playlists/${id}`} style={{ textDecoration: 'none' }}>\n        <ThemeProvider theme={cardTheme}>\n          <Card>\n            <CardActionArea>\n              {images[0] && (\n                <CardMedia\n                  style={{ padding: '16px' }}\n                  component=\"img\"\n                  alt={`${name} playlist artwork`}\n                  image={images[0].url}\n                  title={name}\n                />\n              )}\n              <CardContent>\n                <Typography>{name}</Typography>\n              </CardContent>\n            </CardActionArea>\n          </Card>\n        </ThemeProvider>\n      </Link>\n    );\n  }\n}\n\nexport { PlaylistCard };\n","import * as React from 'react';\nimport { LinearProgress, ThemeProvider, Grid } from '@material-ui/core';\nimport Pagination from '@material-ui/lab/Pagination';\n\nimport { PlaylistCard } from './subcomponents';\nimport { PLAYLIST_RESULTS_PER_PAGE } from 'common/constants';\nimport { TPlaylistsProps, IPlaylistsState } from './interfaces';\n\nimport { linearProgresTheme } from 'common/themes';\n\nclass Playlists extends React.Component<TPlaylistsProps, IPlaylistsState> {\n  public constructor(props: TPlaylistsProps) {\n    super(props);\n\n    this.state = {\n      page: 1,\n      loading: true,\n    };\n  }\n\n  public async componentDidMount(): Promise<void> {\n    let { location, spotifyWebApi, fetchPlaylists, user, playlists } = this.props;\n\n    // no URL params\n    if (location.search === '') {\n      if (playlists === null) {\n        await fetchPlaylists(spotifyWebApi, user!.id, {\n          limit: PLAYLIST_RESULTS_PER_PAGE,\n          offset: 0,\n        });\n      }\n    }\n\n    this.setState({ loading: false });\n  }\n\n  public handlePaginationChange = (_: React.ChangeEvent<unknown>, page: number) => {\n    let { fetchPlaylists, spotifyWebApi, user, playlists } = this.props;\n    if (playlists!.items[page] === undefined) {\n      fetchPlaylists(spotifyWebApi, user!.id, {\n        limit: PLAYLIST_RESULTS_PER_PAGE,\n        offset: (page - 1) * PLAYLIST_RESULTS_PER_PAGE,\n      });\n    }\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n    this.setState({ page });\n  };\n\n  public render(): JSX.Element {\n    let { playlists } = this.props;\n    let { page, loading } = this.state;\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Grid container spacing={3}>\n          {loading && (\n            <Grid item xs={12}>\n              <ThemeProvider theme={linearProgresTheme}>\n                <LinearProgress />\n              </ThemeProvider>\n            </Grid>\n          )}\n\n          {playlists &&\n            playlists.items[page] &&\n            playlists.items[page].map((playlist: SpotifyApi.PlaylistObjectSimplified) => {\n              return (\n                <Grid item xs={12} md={6} lg={4} xl={3} key={`playlist-card-${playlist.id}`}>\n                  <PlaylistCard {...playlist} />\n                </Grid>\n              );\n            })}\n        </Grid>\n        <br />\n        {playlists && playlists.items && (\n          <Pagination\n            count={Math.floor(playlists.total / PLAYLIST_RESULTS_PER_PAGE)}\n            page={page}\n            onChange={this.handlePaginationChange}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Playlists;\n","export const PLAYLIST_RESULTS_PER_PAGE: number = 8;\n","import { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { withRouter } from 'react-router-dom';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport Playlists from './Playlists';\nimport { fetchPlaylists } from './actions';\nimport { IPaginationOptions, IAction, IPagingObject, IRootState } from 'common/interfaces';\nimport { IStateProps, IDispatchProps } from './interfaces';\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<IRootState, null, IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>>>\n): IDispatchProps => {\n  return {\n    fetchPlaylists: (api: SpotifyWebApi, userId: string, options: IPaginationOptions) =>\n      dispatch(fetchPlaylists(api, userId, options)),\n  };\n};\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n    user: state.user,\n    playlists: state.playlists,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Playlists));\n","import * as React from 'react';\nimport {\n  Typography,\n  Grid,\n  ThemeProvider,\n  Button,\n  Select,\n  Chip,\n  Slider,\n  Input,\n  MenuItem,\n  Avatar,\n  FormHelperText,\n  FormControl,\n  TextField,\n} from '@material-ui/core';\n\nimport { capitalizeFirstLetter } from 'common/helpers';\nimport { Response, IAudioFeatures } from 'common/interfaces';\nimport { TCreatePlaylistProps, ICreatePlaylistState } from './interfaces';\n\nimport { buttonTheme, sliderTheme, inputTheme, chipTheme } from 'common/themes';\n\nclass CreatePlaylist extends React.Component<TCreatePlaylistProps, ICreatePlaylistState> {\n  public constructor(props: TCreatePlaylistProps) {\n    super(props);\n\n    this.state = {\n      query: {\n        acousticness: {\n          min: 0.0,\n          max: 1.0,\n        },\n        danceability: {\n          min: 0.0,\n          max: 1.0,\n        },\n        energy: {\n          min: 0.0,\n          max: 1.0,\n        },\n        instrumentalness: {\n          min: 0.0,\n          max: 1.0,\n        },\n        valence: {\n          min: 0.0,\n          max: 1.0,\n        },\n      },\n      selectedArtistsIds: [],\n      playlistName: '',\n    };\n  }\n\n  public componentDidMount = (): void => {\n    let { fetchTopArtists, spotifyWebApi } = this.props;\n\n    fetchTopArtists(spotifyWebApi, 'short_term');\n    fetchTopArtists(spotifyWebApi, 'medium_term');\n    fetchTopArtists(spotifyWebApi, 'long_term');\n  };\n\n  public valueLabelFormat = (value: number, _: number): string => {\n    return Math.round(value * 100).toString();\n  };\n\n  public handleSliderChange = (attr: keyof IAudioFeatures) => {\n    return (_: React.ChangeEvent<{}>, newValue: number[]) => {\n      let state: ICreatePlaylistState = this.state;\n      state.query[attr] = { min: newValue[0], max: newValue[1] };\n\n      this.setState(state);\n    };\n  };\n\n  public handlePlaylistNameChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    this.setState({\n      playlistName: event.target.value,\n    });\n  };\n\n  public handleArtistSelect = (event: React.ChangeEvent<{ value: unknown }>) => {\n    this.setState({\n      selectedArtistsIds: (event.target.value as unknown) as string[],\n    });\n  };\n\n  public handleCreatePlaylistClick = (_: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    let {\n      query: { acousticness, danceability, energy, instrumentalness, valence },\n    } = this.state;\n    this.props.spotifyWebApi\n      .getRecommendations({\n        min_acousticness: acousticness.min,\n        max_acousticness: acousticness.max,\n        min_danceability: danceability.min,\n        max_danceability: danceability.max,\n        min_energy: energy.min,\n        max_energy: energy.max,\n        min_instrumentalness: instrumentalness.min,\n        max_instrumentalness: instrumentalness.max,\n        min_valence: valence.min,\n        max_valence: valence.max,\n        seed_artists: this.state.selectedArtistsIds,\n        limit: 50,\n      })\n      .then((response: Response<SpotifyApi.RecommendationsFromSeedsResponse>) => {\n        if (response.body.tracks.length > 0) {\n          this.props.spotifyWebApi\n            .createPlaylist(this.props.user.id, this.state.playlistName)\n            .then((playlist: Response<SpotifyApi.CreatePlaylistResponse>) => {\n              let tracks: ReadonlyArray<string> = response.body.tracks.map(\n                (track: SpotifyApi.TrackObjectSimplified) => track.uri\n              );\n\n              this.props.spotifyWebApi.addTracksToPlaylist(playlist.body.id, tracks).then(() => {\n                this.props.clearPlaylist();\n                this.props.history.push(`/playlists/${playlist.body.id}`);\n              });\n            });\n        } else {\n          this.props.openSnackBar({\n            open: true,\n            message: 'Oops! Looks like you need to broaden your selection',\n          });\n        }\n      });\n  };\n\n  public renderPlaylistNameInput = (): JSX.Element => {\n    return (\n      <>\n        <Typography>Playlist name</Typography>\n        <TextField value={this.state.playlistName} onChange={this.handlePlaylistNameChange} />\n      </>\n    );\n  };\n\n  public renderAttributeSlider = (attribute: keyof IAudioFeatures): JSX.Element => {\n    return (\n      <>\n        <Typography>{capitalizeFirstLetter(attribute as string)}</Typography>\n        <ThemeProvider theme={sliderTheme}>\n          <Slider\n            valueLabelDisplay={'auto'}\n            valueLabelFormat={this.valueLabelFormat}\n            min={0}\n            max={1}\n            step={0.01}\n            value={[this.state.query[attribute].min, this.state.query[attribute].max]}\n            onChange={\n              (this.handleSliderChange(attribute) as unknown) as (\n                event: React.ChangeEvent<{}>,\n                value: number | number[]\n              ) => void\n            }\n          />\n        </ThemeProvider>\n      </>\n    );\n  };\n\n  public renderArtistSelect = (artists: SpotifyApi.ArtistObjectFull[]): JSX.Element => {\n    let { selectedArtistsIds } = this.state;\n\n    return (\n      <>\n        <Typography>Suggested artists</Typography>\n        <ThemeProvider theme={inputTheme}>\n          <FormControl error>\n            <Select\n              error={selectedArtistsIds.length > 3}\n              multiple\n              value={selectedArtistsIds}\n              onChange={this.handleArtistSelect}\n              input={<Input multiline />}\n              renderValue={(selected) => (\n                <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                  {(selected as string[]).map((value) => (\n                    <ThemeProvider theme={chipTheme} key={value}>\n                      <Chip\n                        label={artists.find((a) => a.id === value)?.name}\n                        avatar={<Avatar src={artists.find((a) => a.id === value)?.images[0].url} />}\n                      />\n                    </ThemeProvider>\n                  ))}\n                </div>\n              )}\n            >\n              {artists\n                .sort((a: SpotifyApi.ArtistObjectFull, b: SpotifyApi.ArtistObjectFull) =>\n                  a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n                )\n                .map(\n                  (artist: SpotifyApi.ArtistObjectFull): JSX.Element => (\n                    <MenuItem key={artist.name} value={artist.id}>\n                      {artist.name}\n                    </MenuItem>\n                  )\n                )}\n            </Select>\n            {selectedArtistsIds.length > 3 && <FormHelperText>Please select 1 - 3 artists</FormHelperText>}\n          </FormControl>\n        </ThemeProvider>\n      </>\n    );\n  };\n\n  public render = (): JSX.Element => {\n    let { selectedArtistsIds, playlistName } = this.state;\n\n    let attributes: (keyof IAudioFeatures)[] = [\n      'acousticness',\n      'danceability',\n      'energy',\n      'instrumentalness',\n      'valence',\n    ];\n\n    let artists: SpotifyApi.ArtistObjectFull[] = [];\n\n    let { topArtists } = this.props;\n\n    if (topArtists && topArtists.longTerm && topArtists.mediumTerm && topArtists.shortTerm) {\n      let { longTerm, mediumTerm, shortTerm } = topArtists;\n\n      artists = artists.concat(longTerm.items.concat(mediumTerm.items.concat(shortTerm.items)));\n\n      artists = artists.filter((e, i) => artists.findIndex((a) => a.id === e.id) === i);\n    }\n\n    return (\n      <Grid container spacing={3} alignItems={'center'}>\n        <Grid item xs={12}>\n          <Typography variant={'h6'}>Create a playlist</Typography>\n        </Grid>\n\n        <Grid item xs={12}>\n          {this.renderPlaylistNameInput()}\n        </Grid>\n\n        <Grid item xs={12}>\n          {this.renderArtistSelect(artists)}\n        </Grid>\n\n        {attributes.map(\n          (attribute: keyof IAudioFeatures): JSX.Element => {\n            return (\n              <Grid item xs={12} key={`slider-${attribute}`}>\n                {this.renderAttributeSlider(attribute)}\n              </Grid>\n            );\n          }\n        )}\n\n        <Grid container direction={'row'} justify={'center'}>\n          <Grid item>\n            <ThemeProvider theme={buttonTheme}>\n              <Button\n                variant={'contained'}\n                color={'primary'}\n                size={'medium'}\n                onClick={this.handleCreatePlaylistClick}\n                disabled={selectedArtistsIds.length === 0 || selectedArtistsIds.length > 3 || playlistName === ''}\n              >\n                Create\n              </Button>\n            </ThemeProvider>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  };\n}\n\nexport default CreatePlaylist;\n","import SpotifyWebApi from 'spotify-web-api-node';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { SnackbarProps } from '@material-ui/core';\n\nimport CreatePlaylist from './CreatePlaylist';\nimport { fetchTopArtists, openSnackbar } from 'common/actions';\nimport { clearPlaylist } from 'components/Playlists/actions';\nimport { IRootState, IAction } from 'common/interfaces';\nimport { IStateProps, IDispatchProps } from './interfaces';\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<\n    IRootState,\n    null,\n    IAction<SpotifyApi.UsersTopArtistsResponse> | IAction<Partial<SnackbarProps>> | IAction<unknown>\n  >\n): IDispatchProps => {\n  return {\n    fetchTopArtists: (api: SpotifyWebApi, timeRange: 'long_term' | 'medium_term' | 'short_term') =>\n      dispatch(fetchTopArtists(api, timeRange)),\n    openSnackBar: (data: Partial<SnackbarProps>) => dispatch(openSnackbar(data)),\n    clearPlaylist: () => dispatch(clearPlaylist()),\n  };\n};\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n    user: state.user!,\n    tracksAttributes: state.tracksAttributes,\n    topArtists: state.topArtists,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreatePlaylist));\n","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { MapStateToPropsParam, connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Divider, Avatar } from '@material-ui/core';\n\nimport { IRootState } from 'common/interfaces';\n\nexport interface IProfileProps {}\n\nexport interface IStateProps {\n  user: SpotifyApi.CurrentUsersProfileResponse | null;\n}\n\nexport type TProfileProps = IProfileProps & IStateProps & RouteComponentProps;\n\nclass Profile extends React.PureComponent<TProfileProps> {\n  public render(): JSX.Element | null {\n    let { user } = this.props;\n\n    if (!user) return null;\n\n    return (\n      <div>\n        <Divider />\n        <br />\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar\n            alt={user.display_name}\n            src={user.images && user.images[0] && user.images[0].url}\n            style={{\n              width: '100px',\n              height: '100px',\n            }}\n          />\n          <h1\n            style={{\n              color: 'white',\n              padding: '8px 16px',\n              wordWrap: 'break-word',\n            }}\n          >\n            {user.display_name}\n          </h1>\n          <Divider />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToPropsParam<IStateProps, IProfileProps, IRootState> = (\n  state: IRootState\n): IStateProps => {\n  return {\n    user: state.user,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(Profile));\n","import * as React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { Button, ThemeProvider, Typography } from '@material-ui/core';\nimport Cookies from 'universal-cookie';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport { setGlobalSpotifyClient } from 'common/actions';\nimport { IAction, IRootState } from 'common/interfaces';\n\nimport { buttonTheme } from 'common/themes';\n\nexport interface ISignOutProps {}\n\nexport interface IDispatchProps {\n  setGlobalSpotifyClient: (token: string) => IAction<string>;\n}\n\nexport interface IStateProps {\n  spotifyWebApi: SpotifyWebApi;\n}\n\nexport type TSignOutProps = ISignOutProps & IStateProps & IDispatchProps & RouteComponentProps;\n\nclass SignOut extends React.PureComponent<TSignOutProps> {\n  public onClickHandler = (_: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    let { setGlobalSpotifyClient, history } = this.props;\n\n    const cookie = new Cookies();\n    cookie.remove('spotify-bearer', { path: '/' });\n    setGlobalSpotifyClient(cookie.get('spotify-bearer'));\n    history.push('/');\n  };\n\n  public render(): JSX.Element {\n    return (\n      <div>\n        <ThemeProvider theme={buttonTheme}>\n          <Button onClick={this.onClickHandler}>\n            <Typography style={{ color: 'white' }}>Sign out</Typography>\n          </Button>\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<IAction<string>>): IDispatchProps => {\n  return {\n    setGlobalSpotifyClient: (token: string) => dispatch(setGlobalSpotifyClient(token)),\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SignOut));\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MusicNote from '@material-ui/icons/MusicNote';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\n\nimport Profile from './subcomponents/Profile';\nimport SignOut from './subcomponents/SignOut';\nimport { Link } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    drawer: {\n      [theme.breakpoints.up('sm')]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n    appBar: {\n      backgroundColor: '#1D1E28',\n      [theme.breakpoints.up('sm')]: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n      },\n\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    // necessary for content to be below app bar\n    toolbar: {\n      ...theme.mixins.toolbar,\n\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    drawerPaper: {\n      width: drawerWidth,\n      backgroundColor: '#1D1E28',\n    },\n    content: {\n      flexGrow: 1,\n      backgroundColor: '#d3d3d3',\n      padding: theme.spacing(3),\n    },\n  })\n);\n\nexport default function ResponsiveDrawer(props: any) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const drawer = (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        height: 'inherit',\n      }}\n    >\n      <div>\n        <h1 style={{ color: 'white', padding: '8px 16px' }}>Apollo's Playlist</h1>\n        <Divider />\n        <List>\n          <Link to={'/playlists'} style={{ textDecoration: 'none' }}>\n            <ListItem button key={'Playlists'}>\n              <MusicNote style={{ color: 'white' }} />\n              <ListItemText primary={'Playlists'} style={{ color: 'white' }} />\n            </ListItem>\n          </Link>\n\n          <Link to={'/create-playlist'} style={{ textDecoration: 'none' }}>\n            <ListItem button key={'Create a Playlist'}>\n              <MusicNote style={{ color: 'white' }} />\n              <ListItemText primary={'Create a Playlist'} style={{ color: 'white' }} />\n            </ListItem>\n          </Link>\n        </List>\n        <Divider />\n      </div>\n      <div>\n        <Profile />\n        <Divider />\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <SignOut />\n        </div>\n      </div>\n    </div>\n  );\n\n  const container = document.body;\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Apollo's Playlist\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            <React.Fragment>{drawer}</React.Fragment>\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {props.children}\n      </main>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Cookies from 'universal-cookie';\nimport { Snackbar } from '@material-ui/core';\n\nimport HomePage from 'components/HomePage';\nimport NotFound from 'components/NotFound';\nimport Playlist from 'components/Playlist';\nimport Playlists from 'components/Playlists';\nimport CreatePlaylist from 'components/CreatePlaylist';\nimport ResponsiveDrawer from 'components/ResponsiveDrawer/ResponsiveDrawer';\n\nimport { TAppProps } from './interfaces';\n\nimport './styles.scss';\n\nclass App extends React.PureComponent<TAppProps> {\n  public async componentDidMount() {\n    let { setGlobalSpotifyClient, fetchUser, history } = this.props;\n    const cookie = new Cookies();\n    setGlobalSpotifyClient(cookie.get('spotify-bearer'));\n\n    let { spotifyWebApi } = this.props;\n\n    if (spotifyWebApi.getAccessToken() !== undefined) {\n      await fetchUser(spotifyWebApi).then((_: void) => {\n        if (history.location.pathname === '/') {\n          history.push('/playlists');\n        }\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    let { closeSnackbar, snackbar } = this.props;\n    let isLoggedIn: boolean = this.props.spotifyWebApi.getAccessToken() !== undefined;\n\n    if (!isLoggedIn) {\n      return (\n        <div className=\"apollos-playlist-container\">\n          <HomePage />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"apollos-playlist-container\">\n        <ResponsiveDrawer>\n          <Snackbar {...snackbar} onClose={closeSnackbar} />\n          <Switch>\n            <Route exact path={['/', '/playlists']} component={Playlists} />\n            <Route path={'/playlists/:playlistId'} component={Playlist} />\n            <Route exact path={'/create-playlist'} component={CreatePlaylist} />\n            <Route path=\"*\" component={NotFound} />\n          </Switch>\n        </ResponsiveDrawer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport App from './App';\nimport { setGlobalSpotifyClient, fetchUser, closeSnackbar, openSnackbar } from 'common/actions';\nimport { IAction, IRootState } from 'common/interfaces';\nimport { IDispatchProps, IStateProps } from './interfaces';\nimport { SnackbarProps } from '@material-ui/core';\n\nconst mapStateToProps = (state: IRootState): IStateProps => {\n  return {\n    spotifyWebApi: state.spotifyWebApi,\n    user: state.user,\n    snackbar: state.snackbar,\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<\n    IRootState,\n    null,\n    | IAction<string>\n    | IAction<SpotifyApi.CurrentUsersProfileResponse>\n    | IAction<unknown>\n    | IAction<Partial<SnackbarProps>>\n  >\n): IDispatchProps => {\n  return {\n    setGlobalSpotifyClient: (token: string) => dispatch(setGlobalSpotifyClient(token)),\n    fetchUser: (api: SpotifyWebApi) => dispatch(fetchUser(api)),\n    openSnackbar: (data: Partial<SnackbarProps>) => dispatch(openSnackbar(data)),\n    closeSnackbar: () => dispatch(closeSnackbar()),\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","import merge from 'lodash/merge';\nimport { SnackbarProps } from '@material-ui/core';\n\nimport { IAction } from 'common/interfaces';\nimport { SNACKBAR } from 'common/actions/snackbar';\n\nexport const initialSnackbarState: SnackbarProps = {\n  open: false,\n  message: '',\n  autoHideDuration: 10000,\n  anchorOrigin: { vertical: 'bottom', horizontal: 'right' },\n};\n\nexport const snackBarReducer = (\n  state: SnackbarProps = initialSnackbarState,\n  action: IAction<Partial<SnackbarProps>>\n): SnackbarProps => {\n  switch (action.type) {\n    case SNACKBAR.OPEN:\n      return merge({}, state, action.data);\n\n    case SNACKBAR.CLOSE:\n      return merge({}, state, { ...state, open: false });\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\nimport { clientReducer, userReducer, tracksAttributesReducer } from 'common/reducers';\nimport { playlistsReducer } from 'components/Playlists/reducer';\nimport { playlistReducer } from 'components/Playlist/reducer';\nimport { topArtistsReducer } from 'components/TopArtists/reducer';\nimport { snackBarReducer } from 'components/Snackbar/reducer';\n\nexport default combineReducers({\n  spotifyWebApi: clientReducer,\n  user: userReducer,\n  playlists: playlistsReducer,\n  playlist: playlistReducer,\n  tracksAttributes: tracksAttributesReducer,\n  topArtists: topArtistsReducer,\n  snackbar: snackBarReducer,\n});\n","import SpotifyWebApi from 'spotify-web-api-node';\n\nimport { clientId, redirectUri } from 'authorization';\n\nimport { SPOTIFT_API } from 'common/actions';\nimport { IAction } from 'common/interfaces';\n\nexport const clientReducer = (\n  state: SpotifyWebApi = new SpotifyWebApi({\n    clientId,\n    redirectUri,\n  }),\n  action: IAction<string>\n): SpotifyWebApi => {\n  switch (action.type) {\n    case SPOTIFT_API.SET_GLOBAL_SPOTIFY_CLIENT_TOKEN:\n      state.setAccessToken(action.data);\n\n      return state;\n\n    default:\n      return state;\n  }\n};\n","import { USER } from 'common/actions';\nimport { IAction } from 'common/interfaces';\n\nexport const userReducer = (\n  state: SpotifyApi.CurrentUsersProfileResponse | null = null,\n  action: IAction<SpotifyApi.CurrentUsersProfileResponse>\n): SpotifyApi.CurrentUsersProfileResponse | null => {\n  switch (action.type) {\n    case USER.RECEIVE_USER:\n      return action.data;\n\n    default:\n      return state;\n  }\n};\n","import merge from 'lodash/merge';\n\nimport { PLAYLISTS } from './actions';\nimport { IAction, IPagingObject } from 'common/interfaces';\n\nexport const playlistsReducer = (\n  state: IPagingObject<SpotifyApi.PlaylistObjectSimplified> | null = null,\n  action: IAction<IPagingObject<SpotifyApi.PlaylistObjectSimplified>>\n): IPagingObject<SpotifyApi.PlaylistObjectSimplified> | null => {\n  switch (action.type) {\n    case PLAYLISTS.RECEIVE_PLAYLISTS:\n      return merge({}, state, action.data);\n\n    case PLAYLISTS.CLEAR:\n      return null;\n\n    default:\n      return state;\n  }\n};\n","import merge from 'lodash/merge';\n\nimport { PLAYLIST } from './actions';\nimport { IAction } from 'common/interfaces';\n\nexport const playlistReducer = (\n  state: SpotifyApi.SinglePlaylistResponse | null = null,\n  action: IAction<SpotifyApi.SinglePlaylistResponse>\n): SpotifyApi.SinglePlaylistResponse | null => {\n  switch (action.type) {\n    case PLAYLIST.RECEIVE_PLAYLIST:\n      return merge({}, state, action.data);\n\n    default:\n      return state;\n  }\n};\n","import merge from 'lodash/merge';\n\nimport { TRACKS_ATTRIBUTES } from 'common/actions';\nimport { IAction } from 'common/interfaces';\n\nexport const tracksAttributesReducer = (\n  state: SpotifyApi.MultipleAudioFeaturesResponse | null = null,\n  action: IAction<SpotifyApi.MultipleAudioFeaturesResponse>\n): SpotifyApi.MultipleAudioFeaturesResponse | null => {\n  switch (action.type) {\n    case TRACKS_ATTRIBUTES.RECEIVE_TRACKS_ATTRIBUTES:\n      return merge({}, state, action.data);\n\n    default:\n      return state;\n  }\n};\n","import merge from 'lodash/merge';\n\nimport { TOP_ARTISTS } from 'common/actions/topArtists';\nimport { IAction } from 'common/interfaces';\n\nexport const topArtistsReducer = (\n  state: ITopArtistsReducer | null = null,\n  action: IAction<SpotifyApi.UsersTopArtistsResponse>\n): ITopArtistsReducer | null => {\n  switch (action.type) {\n    case TOP_ARTISTS.RECEIVE_TOP_ARTISTS_LONG_TERM:\n      return merge({}, state, { longTerm: action.data });\n\n    case TOP_ARTISTS.RECEIVE_TOP_ARTISTS_MEDIUM_TERM:\n      return merge({}, state, { mediumTerm: action.data });\n\n    case TOP_ARTISTS.RECEIVE_TOP_ARTISTS_SHORT_TERM:\n      return merge({}, state, { shortTerm: action.data });\n\n    default:\n      return state;\n  }\n};\n\nexport interface ITopArtistsReducer {\n  longTerm: SpotifyApi.UsersTopArtistsResponse | null;\n  mediumTerm: SpotifyApi.UsersTopArtistsResponse | null;\n  shortTerm: SpotifyApi.UsersTopArtistsResponse | null;\n}\n","import { createStore, applyMiddleware, Store } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nimport { clientId, redirectUri } from 'authorization';\n\nimport { initialSnackbarState } from 'components/Snackbar/reducer';\nimport rootReducer from './rootReducer';\nimport { IRootState } from 'common/interfaces';\n\nconst defaultState: IRootState = {\n  spotifyWebApi: new SpotifyWebApi({\n    clientId: clientId,\n    redirectUri: redirectUri,\n  }),\n  user: null,\n  playlist: null,\n  playlists: null,\n  tracksAttributes: null,\n  topArtists: null,\n  snackbar: initialSnackbarState,\n};\n\nconst configureStore = (preloadedState: IRootState = defaultState): Store<IRootState> => {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    process.env.NODE_ENV === 'development' ? composeWithDevTools(applyMiddleware(thunk)) : applyMiddleware(thunk)\n  );\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Store } from 'redux';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from 'core/app';\nimport configureStore from 'redux/store';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const root: HTMLElement = document.getElementById('root') as HTMLElement;\n  const store: Store = configureStore();\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>,\n    root\n  );\n});\n"],"sourceRoot":""}